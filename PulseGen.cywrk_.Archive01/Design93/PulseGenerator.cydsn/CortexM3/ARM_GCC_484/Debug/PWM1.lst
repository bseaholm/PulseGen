ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"PWM1.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWM1_Enable,"ax",%progbits
  19              		.align	2
  20              		.global	PWM1_Enable
  21              		.thumb
  22              		.thumb_func
  23              		.type	PWM1_Enable, %function
  24              	PWM1_Enable:
  25              	.LFB2:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\PWM1.c"
   1:.\Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/PWM1.c **** * File Name: PWM1.c
   3:.\Generated_Source\PSoC5/PWM1.c **** * Version 3.30
   4:.\Generated_Source\PSoC5/PWM1.c **** *
   5:.\Generated_Source\PSoC5/PWM1.c **** * Description:
   6:.\Generated_Source\PSoC5/PWM1.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:.\Generated_Source\PSoC5/PWM1.c **** *  comparitors. Each instance of this user module is capable of generating
   8:.\Generated_Source\PSoC5/PWM1.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:.\Generated_Source\PSoC5/PWM1.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:.\Generated_Source\PSoC5/PWM1.c **** *  The compare value output may be configured to be active when the present
  11:.\Generated_Source\PSoC5/PWM1.c **** *  counter is less than or less than/equal to the compare value.
  12:.\Generated_Source\PSoC5/PWM1.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:.\Generated_Source\PSoC5/PWM1.c **** *  width wide when the counter is equal to zero.
  14:.\Generated_Source\PSoC5/PWM1.c **** *
  15:.\Generated_Source\PSoC5/PWM1.c **** * Note:
  16:.\Generated_Source\PSoC5/PWM1.c **** *
  17:.\Generated_Source\PSoC5/PWM1.c **** *******************************************************************************
  18:.\Generated_Source\PSoC5/PWM1.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:.\Generated_Source\PSoC5/PWM1.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:.\Generated_Source\PSoC5/PWM1.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:.\Generated_Source\PSoC5/PWM1.c **** * the software package with which this file was provided.
  22:.\Generated_Source\PSoC5/PWM1.c **** ********************************************************************************/
  23:.\Generated_Source\PSoC5/PWM1.c **** 
  24:.\Generated_Source\PSoC5/PWM1.c **** #include "PWM1.h"
  25:.\Generated_Source\PSoC5/PWM1.c **** 
  26:.\Generated_Source\PSoC5/PWM1.c **** /* Error message for removed <resource> through optimization */
  27:.\Generated_Source\PSoC5/PWM1.c **** #ifdef PWM1_PWMUDB_genblk1_ctrlreg__REMOVED
  28:.\Generated_Source\PSoC5/PWM1.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:.\Generated_Source\PSoC5/PWM1.c ****          constant 1 for reset. This will prevent the component from operating.
  30:.\Generated_Source\PSoC5/PWM1.c **** #endif /* PWM1_PWMUDB_genblk1_ctrlreg__REMOVED */
  31:.\Generated_Source\PSoC5/PWM1.c **** 
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 2


  32:.\Generated_Source\PSoC5/PWM1.c **** uint8 PWM1_initVar = 0u;
  33:.\Generated_Source\PSoC5/PWM1.c **** 
  34:.\Generated_Source\PSoC5/PWM1.c **** 
  35:.\Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
  36:.\Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_Start
  37:.\Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
  38:.\Generated_Source\PSoC5/PWM1.c **** *
  39:.\Generated_Source\PSoC5/PWM1.c **** * Summary:
  40:.\Generated_Source\PSoC5/PWM1.c **** *  The start function initializes the pwm with the default values, the
  41:.\Generated_Source\PSoC5/PWM1.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:.\Generated_Source\PSoC5/PWM1.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:.\Generated_Source\PSoC5/PWM1.c **** *
  44:.\Generated_Source\PSoC5/PWM1.c **** * Parameters:
  45:.\Generated_Source\PSoC5/PWM1.c **** *  None
  46:.\Generated_Source\PSoC5/PWM1.c **** *
  47:.\Generated_Source\PSoC5/PWM1.c **** * Return:
  48:.\Generated_Source\PSoC5/PWM1.c **** *  None
  49:.\Generated_Source\PSoC5/PWM1.c **** *
  50:.\Generated_Source\PSoC5/PWM1.c **** * Global variables:
  51:.\Generated_Source\PSoC5/PWM1.c **** *  PWM1_initVar: Is modified when this function is called for the
  52:.\Generated_Source\PSoC5/PWM1.c **** *   first time. Is used to ensure that initialization happens only once.
  53:.\Generated_Source\PSoC5/PWM1.c **** *
  54:.\Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
  55:.\Generated_Source\PSoC5/PWM1.c **** void PWM1_Start(void) 
  56:.\Generated_Source\PSoC5/PWM1.c **** {
  57:.\Generated_Source\PSoC5/PWM1.c ****     /* If not Initialized then initialize all required hardware and software */
  58:.\Generated_Source\PSoC5/PWM1.c ****     if(PWM1_initVar == 0u)
  59:.\Generated_Source\PSoC5/PWM1.c ****     {
  60:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_Init();
  61:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_initVar = 1u;
  62:.\Generated_Source\PSoC5/PWM1.c ****     }
  63:.\Generated_Source\PSoC5/PWM1.c ****     PWM1_Enable();
  64:.\Generated_Source\PSoC5/PWM1.c **** 
  65:.\Generated_Source\PSoC5/PWM1.c **** }
  66:.\Generated_Source\PSoC5/PWM1.c **** 
  67:.\Generated_Source\PSoC5/PWM1.c **** 
  68:.\Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
  69:.\Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_Init
  70:.\Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
  71:.\Generated_Source\PSoC5/PWM1.c **** *
  72:.\Generated_Source\PSoC5/PWM1.c **** * Summary:
  73:.\Generated_Source\PSoC5/PWM1.c **** *  Initialize component's parameters to the parameters set by user in the
  74:.\Generated_Source\PSoC5/PWM1.c **** *  customizer of the component placed onto schematic. Usually called in
  75:.\Generated_Source\PSoC5/PWM1.c **** *  PWM1_Start().
  76:.\Generated_Source\PSoC5/PWM1.c **** *
  77:.\Generated_Source\PSoC5/PWM1.c **** * Parameters:
  78:.\Generated_Source\PSoC5/PWM1.c **** *  None
  79:.\Generated_Source\PSoC5/PWM1.c **** *
  80:.\Generated_Source\PSoC5/PWM1.c **** * Return:
  81:.\Generated_Source\PSoC5/PWM1.c **** *  None
  82:.\Generated_Source\PSoC5/PWM1.c **** *
  83:.\Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
  84:.\Generated_Source\PSoC5/PWM1.c **** void PWM1_Init(void) 
  85:.\Generated_Source\PSoC5/PWM1.c **** {
  86:.\Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UsingFixedFunction || PWM1_UseControl)
  87:.\Generated_Source\PSoC5/PWM1.c ****         uint8 ctrl;
  88:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction || PWM1_UseControl) */
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 3


  89:.\Generated_Source\PSoC5/PWM1.c **** 
  90:.\Generated_Source\PSoC5/PWM1.c ****     #if(!PWM1_UsingFixedFunction)
  91:.\Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UseStatus)
  92:.\Generated_Source\PSoC5/PWM1.c ****             /* Interrupt State Backup for Critical Region*/
  93:.\Generated_Source\PSoC5/PWM1.c ****             uint8 PWM1_interruptState;
  94:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UseStatus) */
  95:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (!PWM1_UsingFixedFunction) */
  96:.\Generated_Source\PSoC5/PWM1.c **** 
  97:.\Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UsingFixedFunction)
  98:.\Generated_Source\PSoC5/PWM1.c ****         /* You are allowed to write the compare value (FF only) */
  99:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL |= PWM1_CFG0_MODE;
 100:.\Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_DeadBand2_4)
 101:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_CONTROL |= PWM1_CFG0_DB;
 102:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_DeadBand2_4) */
 103:.\Generated_Source\PSoC5/PWM1.c **** 
 104:.\Generated_Source\PSoC5/PWM1.c ****         ctrl = PWM1_CONTROL3 & ((uint8 )(~PWM1_CTRL_CMPMODE1_MASK));
 105:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL3 = ctrl | PWM1_DEFAULT_COMPARE1_MODE;
 106:.\Generated_Source\PSoC5/PWM1.c **** 
 107:.\Generated_Source\PSoC5/PWM1.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_RT1 &= ((uint8)(~PWM1_RT1_MASK));
 109:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_RT1 |= PWM1_SYNC;
 110:.\Generated_Source\PSoC5/PWM1.c **** 
 111:.\Generated_Source\PSoC5/PWM1.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_RT1 &= ((uint8)(~PWM1_SYNCDSI_MASK));
 113:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_RT1 |= PWM1_SYNCDSI_EN;
 114:.\Generated_Source\PSoC5/PWM1.c **** 
 115:.\Generated_Source\PSoC5/PWM1.c ****     #elif (PWM1_UseControl)
 116:.\Generated_Source\PSoC5/PWM1.c ****         /* Set the default compare mode defined in the parameter */
 117:.\Generated_Source\PSoC5/PWM1.c ****         ctrl = PWM1_CONTROL & ((uint8)(~PWM1_CTRL_CMPMODE2_MASK)) &
 118:.\Generated_Source\PSoC5/PWM1.c ****                 ((uint8)(~PWM1_CTRL_CMPMODE1_MASK));
 119:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL = ctrl | PWM1_DEFAULT_COMPARE2_MODE |
 120:.\Generated_Source\PSoC5/PWM1.c ****                                    PWM1_DEFAULT_COMPARE1_MODE;
 121:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
 122:.\Generated_Source\PSoC5/PWM1.c **** 
 123:.\Generated_Source\PSoC5/PWM1.c ****     #if (!PWM1_UsingFixedFunction)
 124:.\Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_Resolution == 8)
 125:.\Generated_Source\PSoC5/PWM1.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_AUX_CONTROLDP0 |= (PWM1_AUX_CTRL_FIFO0_CLR);
 127:.\Generated_Source\PSoC5/PWM1.c ****         #else /* (PWM1_Resolution == 16)*/
 128:.\Generated_Source\PSoC5/PWM1.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_AUX_CONTROLDP0 |= (PWM1_AUX_CTRL_FIFO0_CLR);
 130:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_AUX_CONTROLDP1 |= (PWM1_AUX_CTRL_FIFO0_CLR);
 131:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_Resolution == 8) */
 132:.\Generated_Source\PSoC5/PWM1.c **** 
 133:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_WriteCounter(PWM1_INIT_PERIOD_VALUE);
 134:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (!PWM1_UsingFixedFunction) */
 135:.\Generated_Source\PSoC5/PWM1.c **** 
 136:.\Generated_Source\PSoC5/PWM1.c ****     PWM1_WritePeriod(PWM1_INIT_PERIOD_VALUE);
 137:.\Generated_Source\PSoC5/PWM1.c **** 
 138:.\Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_UseOneCompareMode)
 139:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_WriteCompare(PWM1_INIT_COMPARE_VALUE1);
 140:.\Generated_Source\PSoC5/PWM1.c ****         #else
 141:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_WriteCompare1(PWM1_INIT_COMPARE_VALUE1);
 142:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_WriteCompare2(PWM1_INIT_COMPARE_VALUE2);
 143:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UseOneCompareMode) */
 144:.\Generated_Source\PSoC5/PWM1.c **** 
 145:.\Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_KillModeMinTime)
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 4


 146:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_WriteKillTime(PWM1_MinimumKillTime);
 147:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_KillModeMinTime) */
 148:.\Generated_Source\PSoC5/PWM1.c **** 
 149:.\Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_DeadBandUsed)
 150:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_WriteDeadTime(PWM1_INIT_DEAD_TIME);
 151:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_DeadBandUsed) */
 152:.\Generated_Source\PSoC5/PWM1.c **** 
 153:.\Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UseStatus || PWM1_UsingFixedFunction)
 154:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_SetInterruptMode(PWM1_INIT_INTERRUPTS_MODE);
 155:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UseStatus || PWM1_UsingFixedFunction) */
 156:.\Generated_Source\PSoC5/PWM1.c **** 
 157:.\Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UsingFixedFunction)
 158:.\Generated_Source\PSoC5/PWM1.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_GLOBAL_ENABLE |= PWM1_BLOCK_EN_MASK;
 160:.\Generated_Source\PSoC5/PWM1.c ****         /* Set the Interrupt source to come from the status register */
 161:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL2 |= PWM1_CTRL2_IRQ_SEL;
 162:.\Generated_Source\PSoC5/PWM1.c ****     #else
 163:.\Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UseStatus)
 164:.\Generated_Source\PSoC5/PWM1.c **** 
 165:.\Generated_Source\PSoC5/PWM1.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:.\Generated_Source\PSoC5/PWM1.c ****             /* Enter Critical Region*/
 167:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_interruptState = CyEnterCriticalSection();
 168:.\Generated_Source\PSoC5/PWM1.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_STATUS_AUX_CTRL |= PWM1_STATUS_ACTL_INT_EN_MASK;
 170:.\Generated_Source\PSoC5/PWM1.c **** 
 171:.\Generated_Source\PSoC5/PWM1.c ****              /* Exit Critical Region*/
 172:.\Generated_Source\PSoC5/PWM1.c ****             CyExitCriticalSection(PWM1_interruptState);
 173:.\Generated_Source\PSoC5/PWM1.c **** 
 174:.\Generated_Source\PSoC5/PWM1.c ****             /* Clear the FIFO to enable the PWM1_STATUS_FIFOFULL
 175:.\Generated_Source\PSoC5/PWM1.c ****                    bit to be set on FIFO full. */
 176:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_ClearFIFO();
 177:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UseStatus) */
 178:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
 179:.\Generated_Source\PSoC5/PWM1.c **** }
 180:.\Generated_Source\PSoC5/PWM1.c **** 
 181:.\Generated_Source\PSoC5/PWM1.c **** 
 182:.\Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
 183:.\Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_Enable
 184:.\Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
 185:.\Generated_Source\PSoC5/PWM1.c **** *
 186:.\Generated_Source\PSoC5/PWM1.c **** * Summary:
 187:.\Generated_Source\PSoC5/PWM1.c **** *  Enables the PWM block operation
 188:.\Generated_Source\PSoC5/PWM1.c **** *
 189:.\Generated_Source\PSoC5/PWM1.c **** * Parameters:
 190:.\Generated_Source\PSoC5/PWM1.c **** *  None
 191:.\Generated_Source\PSoC5/PWM1.c **** *
 192:.\Generated_Source\PSoC5/PWM1.c **** * Return:
 193:.\Generated_Source\PSoC5/PWM1.c **** *  None
 194:.\Generated_Source\PSoC5/PWM1.c **** *
 195:.\Generated_Source\PSoC5/PWM1.c **** * Side Effects:
 196:.\Generated_Source\PSoC5/PWM1.c **** *  This works only if software enable mode is chosen
 197:.\Generated_Source\PSoC5/PWM1.c **** *
 198:.\Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
 199:.\Generated_Source\PSoC5/PWM1.c **** void PWM1_Enable(void) 
 200:.\Generated_Source\PSoC5/PWM1.c **** {
  27              		.loc 1 200 0
  28              		.cfi_startproc
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 5


  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 201:.\Generated_Source\PSoC5/PWM1.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:.\Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UsingFixedFunction)
 203:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_GLOBAL_ENABLE |= PWM1_BLOCK_EN_MASK;
 204:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_GLOBAL_STBY_ENABLE |= PWM1_BLOCK_STBY_EN_MASK;
 205:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
 206:.\Generated_Source\PSoC5/PWM1.c **** 
 207:.\Generated_Source\PSoC5/PWM1.c ****     /* Enable the PWM from the control register  */
 208:.\Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UseControl || PWM1_UsingFixedFunction)
 209:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL |= PWM1_CTRL_ENABLE;
  32              		.loc 1 209 0
  33 0000 024B     		ldr	r3, .L2
  34 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  35 0004 42F08002 		orr	r2, r2, #128
  36 0008 1A70     		strb	r2, [r3]
  37 000a 7047     		bx	lr
  38              	.L3:
  39              		.align	2
  40              	.L2:
  41 000c 7B640040 		.word	1073767547
  42              		.cfi_endproc
  43              	.LFE2:
  44              		.size	PWM1_Enable, .-PWM1_Enable
  45              		.section	.text.PWM1_Stop,"ax",%progbits
  46              		.align	2
  47              		.global	PWM1_Stop
  48              		.thumb
  49              		.thumb_func
  50              		.type	PWM1_Stop, %function
  51              	PWM1_Stop:
  52              	.LFB3:
 210:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UseControl || PWM1_UsingFixedFunction) */
 211:.\Generated_Source\PSoC5/PWM1.c **** }
 212:.\Generated_Source\PSoC5/PWM1.c **** 
 213:.\Generated_Source\PSoC5/PWM1.c **** 
 214:.\Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
 215:.\Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_Stop
 216:.\Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
 217:.\Generated_Source\PSoC5/PWM1.c **** *
 218:.\Generated_Source\PSoC5/PWM1.c **** * Summary:
 219:.\Generated_Source\PSoC5/PWM1.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:.\Generated_Source\PSoC5/PWM1.c **** *  interrupts.
 221:.\Generated_Source\PSoC5/PWM1.c **** *
 222:.\Generated_Source\PSoC5/PWM1.c **** * Parameters:
 223:.\Generated_Source\PSoC5/PWM1.c **** *  None
 224:.\Generated_Source\PSoC5/PWM1.c **** *
 225:.\Generated_Source\PSoC5/PWM1.c **** * Return:
 226:.\Generated_Source\PSoC5/PWM1.c **** *  None
 227:.\Generated_Source\PSoC5/PWM1.c **** *
 228:.\Generated_Source\PSoC5/PWM1.c **** * Side Effects:
 229:.\Generated_Source\PSoC5/PWM1.c **** *  If the Enable mode is set to Hardware only then this function
 230:.\Generated_Source\PSoC5/PWM1.c **** *  has no effect on the operation of the PWM
 231:.\Generated_Source\PSoC5/PWM1.c **** *
 232:.\Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
 233:.\Generated_Source\PSoC5/PWM1.c **** void PWM1_Stop(void) 
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 6


 234:.\Generated_Source\PSoC5/PWM1.c **** {
  53              		.loc 1 234 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
 235:.\Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UseControl || PWM1_UsingFixedFunction)
 236:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL &= ((uint8)(~PWM1_CTRL_ENABLE));
  58              		.loc 1 236 0
  59 0000 024B     		ldr	r3, .L5
  60 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  61 0004 02F07F02 		and	r2, r2, #127
  62 0008 1A70     		strb	r2, [r3]
  63 000a 7047     		bx	lr
  64              	.L6:
  65              		.align	2
  66              	.L5:
  67 000c 7B640040 		.word	1073767547
  68              		.cfi_endproc
  69              	.LFE3:
  70              		.size	PWM1_Stop, .-PWM1_Stop
  71              		.section	.text.PWM1_WriteCounter,"ax",%progbits
  72              		.align	2
  73              		.global	PWM1_WriteCounter
  74              		.thumb
  75              		.thumb_func
  76              		.type	PWM1_WriteCounter, %function
  77              	PWM1_WriteCounter:
  78              	.LFB4:
 237:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UseControl || PWM1_UsingFixedFunction) */
 238:.\Generated_Source\PSoC5/PWM1.c **** 
 239:.\Generated_Source\PSoC5/PWM1.c ****     /* Globally disable the Fixed Function Block chosen */
 240:.\Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UsingFixedFunction)
 241:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_GLOBAL_ENABLE &= ((uint8)(~PWM1_BLOCK_EN_MASK));
 242:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM1_BLOCK_STBY_EN_MASK));
 243:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
 244:.\Generated_Source\PSoC5/PWM1.c **** }
 245:.\Generated_Source\PSoC5/PWM1.c **** 
 246:.\Generated_Source\PSoC5/PWM1.c **** #if (PWM1_UseOneCompareMode)
 247:.\Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_CompareMode1SW)
 248:.\Generated_Source\PSoC5/PWM1.c **** 
 249:.\Generated_Source\PSoC5/PWM1.c **** 
 250:.\Generated_Source\PSoC5/PWM1.c ****         /*******************************************************************************
 251:.\Generated_Source\PSoC5/PWM1.c ****         * Function Name: PWM1_SetCompareMode
 252:.\Generated_Source\PSoC5/PWM1.c ****         ********************************************************************************
 253:.\Generated_Source\PSoC5/PWM1.c ****         *
 254:.\Generated_Source\PSoC5/PWM1.c ****         * Summary:
 255:.\Generated_Source\PSoC5/PWM1.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:.\Generated_Source\PSoC5/PWM1.c ****         *  Center Align Mode or One Output Mode.
 257:.\Generated_Source\PSoC5/PWM1.c ****         *
 258:.\Generated_Source\PSoC5/PWM1.c ****         * Parameters:
 259:.\Generated_Source\PSoC5/PWM1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:.\Generated_Source\PSoC5/PWM1.c ****         *                defined in the H file as input arguments.
 261:.\Generated_Source\PSoC5/PWM1.c ****         *
 262:.\Generated_Source\PSoC5/PWM1.c ****         * Return:
 263:.\Generated_Source\PSoC5/PWM1.c ****         *  None
 264:.\Generated_Source\PSoC5/PWM1.c ****         *
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 7


 265:.\Generated_Source\PSoC5/PWM1.c ****         *******************************************************************************/
 266:.\Generated_Source\PSoC5/PWM1.c ****         void PWM1_SetCompareMode(uint8 comparemode) 
 267:.\Generated_Source\PSoC5/PWM1.c ****         {
 268:.\Generated_Source\PSoC5/PWM1.c ****             #if(PWM1_UsingFixedFunction)
 269:.\Generated_Source\PSoC5/PWM1.c **** 
 270:.\Generated_Source\PSoC5/PWM1.c ****                 #if(0 != PWM1_CTRL_CMPMODE1_SHIFT)
 271:.\Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM1_CTRL_CMPMODE1_SHI
 272:.\Generated_Source\PSoC5/PWM1.c ****                 #else
 273:.\Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemodemasked = comparemode;
 274:.\Generated_Source\PSoC5/PWM1.c ****                 #endif /* (0 != PWM1_CTRL_CMPMODE1_SHIFT) */
 275:.\Generated_Source\PSoC5/PWM1.c **** 
 276:.\Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL3 &= ((uint8)(~PWM1_CTRL_CMPMODE1_MASK)); /*Clear Existing Data */
 277:.\Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL3 |= comparemodemasked;
 278:.\Generated_Source\PSoC5/PWM1.c **** 
 279:.\Generated_Source\PSoC5/PWM1.c ****             #elif (PWM1_UseControl)
 280:.\Generated_Source\PSoC5/PWM1.c **** 
 281:.\Generated_Source\PSoC5/PWM1.c ****                 #if(0 != PWM1_CTRL_CMPMODE1_SHIFT)
 282:.\Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM1_CTRL_CMPMODE1_SH
 283:.\Generated_Source\PSoC5/PWM1.c ****                                                 PWM1_CTRL_CMPMODE1_MASK;
 284:.\Generated_Source\PSoC5/PWM1.c ****                 #else
 285:.\Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemode1masked = comparemode & PWM1_CTRL_CMPMODE1_MASK;
 286:.\Generated_Source\PSoC5/PWM1.c ****                 #endif /* (0 != PWM1_CTRL_CMPMODE1_SHIFT) */
 287:.\Generated_Source\PSoC5/PWM1.c **** 
 288:.\Generated_Source\PSoC5/PWM1.c ****                 #if(0 != PWM1_CTRL_CMPMODE2_SHIFT)
 289:.\Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM1_CTRL_CMPMODE2_SH
 290:.\Generated_Source\PSoC5/PWM1.c ****                                                PWM1_CTRL_CMPMODE2_MASK;
 291:.\Generated_Source\PSoC5/PWM1.c ****                 #else
 292:.\Generated_Source\PSoC5/PWM1.c ****                     uint8 comparemode2masked = comparemode & PWM1_CTRL_CMPMODE2_MASK;
 293:.\Generated_Source\PSoC5/PWM1.c ****                 #endif /* (0 != PWM1_CTRL_CMPMODE2_SHIFT) */
 294:.\Generated_Source\PSoC5/PWM1.c **** 
 295:.\Generated_Source\PSoC5/PWM1.c ****                 /*Clear existing mode */
 296:.\Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL &= ((uint8)(~(PWM1_CTRL_CMPMODE1_MASK |
 297:.\Generated_Source\PSoC5/PWM1.c ****                                             PWM1_CTRL_CMPMODE2_MASK)));
 298:.\Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL |= (comparemode1masked | comparemode2masked);
 299:.\Generated_Source\PSoC5/PWM1.c **** 
 300:.\Generated_Source\PSoC5/PWM1.c ****             #else
 301:.\Generated_Source\PSoC5/PWM1.c ****                 uint8 temp = comparemode;
 302:.\Generated_Source\PSoC5/PWM1.c ****             #endif /* (PWM1_UsingFixedFunction) */
 303:.\Generated_Source\PSoC5/PWM1.c ****         }
 304:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* PWM1_CompareMode1SW */
 305:.\Generated_Source\PSoC5/PWM1.c **** 
 306:.\Generated_Source\PSoC5/PWM1.c **** #else /* UseOneCompareMode */
 307:.\Generated_Source\PSoC5/PWM1.c **** 
 308:.\Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_CompareMode1SW)
 309:.\Generated_Source\PSoC5/PWM1.c **** 
 310:.\Generated_Source\PSoC5/PWM1.c **** 
 311:.\Generated_Source\PSoC5/PWM1.c ****         /*******************************************************************************
 312:.\Generated_Source\PSoC5/PWM1.c ****         * Function Name: PWM1_SetCompareMode1
 313:.\Generated_Source\PSoC5/PWM1.c ****         ********************************************************************************
 314:.\Generated_Source\PSoC5/PWM1.c ****         *
 315:.\Generated_Source\PSoC5/PWM1.c ****         * Summary:
 316:.\Generated_Source\PSoC5/PWM1.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:.\Generated_Source\PSoC5/PWM1.c ****         *
 318:.\Generated_Source\PSoC5/PWM1.c ****         * Parameters:
 319:.\Generated_Source\PSoC5/PWM1.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:.\Generated_Source\PSoC5/PWM1.c ****         *                defined in the H file as input arguments.
 321:.\Generated_Source\PSoC5/PWM1.c ****         *
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 8


 322:.\Generated_Source\PSoC5/PWM1.c ****         * Return:
 323:.\Generated_Source\PSoC5/PWM1.c ****         *  None
 324:.\Generated_Source\PSoC5/PWM1.c ****         *
 325:.\Generated_Source\PSoC5/PWM1.c ****         *******************************************************************************/
 326:.\Generated_Source\PSoC5/PWM1.c ****         void PWM1_SetCompareMode1(uint8 comparemode) 
 327:.\Generated_Source\PSoC5/PWM1.c ****         {
 328:.\Generated_Source\PSoC5/PWM1.c ****             #if(0 != PWM1_CTRL_CMPMODE1_SHIFT)
 329:.\Generated_Source\PSoC5/PWM1.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM1_CTRL_CMPMODE1_SHIFT))
 330:.\Generated_Source\PSoC5/PWM1.c ****                                            PWM1_CTRL_CMPMODE1_MASK;
 331:.\Generated_Source\PSoC5/PWM1.c ****             #else
 332:.\Generated_Source\PSoC5/PWM1.c ****                 uint8 comparemodemasked = comparemode & PWM1_CTRL_CMPMODE1_MASK;
 333:.\Generated_Source\PSoC5/PWM1.c ****             #endif /* (0 != PWM1_CTRL_CMPMODE1_SHIFT) */
 334:.\Generated_Source\PSoC5/PWM1.c **** 
 335:.\Generated_Source\PSoC5/PWM1.c ****             #if (PWM1_UseControl)
 336:.\Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL &= ((uint8)(~PWM1_CTRL_CMPMODE1_MASK)); /*Clear existing mode */
 337:.\Generated_Source\PSoC5/PWM1.c ****                 PWM1_CONTROL |= comparemodemasked;
 338:.\Generated_Source\PSoC5/PWM1.c ****             #endif /* (PWM1_UseControl) */
 339:.\Generated_Source\PSoC5/PWM1.c ****         }
 340:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* PWM1_CompareMode1SW */
 341:.\Generated_Source\PSoC5/PWM1.c **** 
 342:.\Generated_Source\PSoC5/PWM1.c **** #if (PWM1_CompareMode2SW)
 343:.\Generated_Source\PSoC5/PWM1.c **** 
 344:.\Generated_Source\PSoC5/PWM1.c **** 
 345:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 346:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_SetCompareMode2
 347:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 348:.\Generated_Source\PSoC5/PWM1.c ****     *
 349:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 350:.\Generated_Source\PSoC5/PWM1.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:.\Generated_Source\PSoC5/PWM1.c ****     *
 352:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 353:.\Generated_Source\PSoC5/PWM1.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:.\Generated_Source\PSoC5/PWM1.c ****     *                defined in the H file as input arguments.
 355:.\Generated_Source\PSoC5/PWM1.c ****     *
 356:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 357:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 358:.\Generated_Source\PSoC5/PWM1.c ****     *
 359:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 360:.\Generated_Source\PSoC5/PWM1.c ****     void PWM1_SetCompareMode2(uint8 comparemode) 
 361:.\Generated_Source\PSoC5/PWM1.c ****     {
 362:.\Generated_Source\PSoC5/PWM1.c **** 
 363:.\Generated_Source\PSoC5/PWM1.c ****         #if(0 != PWM1_CTRL_CMPMODE2_SHIFT)
 364:.\Generated_Source\PSoC5/PWM1.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM1_CTRL_CMPMODE2_SHIFT)) &
 365:.\Generated_Source\PSoC5/PWM1.c ****                                                  PWM1_CTRL_CMPMODE2_MASK;
 366:.\Generated_Source\PSoC5/PWM1.c ****         #else
 367:.\Generated_Source\PSoC5/PWM1.c ****             uint8 comparemodemasked = comparemode & PWM1_CTRL_CMPMODE2_MASK;
 368:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (0 != PWM1_CTRL_CMPMODE2_SHIFT) */
 369:.\Generated_Source\PSoC5/PWM1.c **** 
 370:.\Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_UseControl)
 371:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_CONTROL &= ((uint8)(~PWM1_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_CONTROL |= comparemodemasked;
 373:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UseControl) */
 374:.\Generated_Source\PSoC5/PWM1.c ****     }
 375:.\Generated_Source\PSoC5/PWM1.c ****     #endif /*PWM1_CompareMode2SW */
 376:.\Generated_Source\PSoC5/PWM1.c **** 
 377:.\Generated_Source\PSoC5/PWM1.c **** #endif /* UseOneCompareMode */
 378:.\Generated_Source\PSoC5/PWM1.c **** 
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 9


 379:.\Generated_Source\PSoC5/PWM1.c **** 
 380:.\Generated_Source\PSoC5/PWM1.c **** #if (!PWM1_UsingFixedFunction)
 381:.\Generated_Source\PSoC5/PWM1.c **** 
 382:.\Generated_Source\PSoC5/PWM1.c **** 
 383:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 384:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteCounter
 385:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 386:.\Generated_Source\PSoC5/PWM1.c ****     *
 387:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 388:.\Generated_Source\PSoC5/PWM1.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:.\Generated_Source\PSoC5/PWM1.c ****     *  implemented for that currently running period and only that period. This API
 390:.\Generated_Source\PSoC5/PWM1.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:.\Generated_Source\PSoC5/PWM1.c ****     *  PWM implementation.
 392:.\Generated_Source\PSoC5/PWM1.c ****     *
 393:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 394:.\Generated_Source\PSoC5/PWM1.c ****     *  counter:  The period new period counter value.
 395:.\Generated_Source\PSoC5/PWM1.c ****     *
 396:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 397:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 398:.\Generated_Source\PSoC5/PWM1.c ****     *
 399:.\Generated_Source\PSoC5/PWM1.c ****     * Side Effects:
 400:.\Generated_Source\PSoC5/PWM1.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:.\Generated_Source\PSoC5/PWM1.c ****     *
 402:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 403:.\Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteCounter(uint8 counter) \
 404:.\Generated_Source\PSoC5/PWM1.c ****                                        
 405:.\Generated_Source\PSoC5/PWM1.c ****     {
  79              		.loc 1 405 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84              	.LVL0:
 406:.\Generated_Source\PSoC5/PWM1.c ****         CY_SET_REG8(PWM1_COUNTER_LSB_PTR, counter);
  85              		.loc 1 406 0
  86 0000 014B     		ldr	r3, .L8
  87 0002 1870     		strb	r0, [r3]
  88 0004 7047     		bx	lr
  89              	.L9:
  90 0006 00BF     		.align	2
  91              	.L8:
  92 0008 0B640040 		.word	1073767435
  93              		.cfi_endproc
  94              	.LFE4:
  95              		.size	PWM1_WriteCounter, .-PWM1_WriteCounter
  96              		.section	.text.PWM1_ReadCounter,"ax",%progbits
  97              		.align	2
  98              		.global	PWM1_ReadCounter
  99              		.thumb
 100              		.thumb_func
 101              		.type	PWM1_ReadCounter, %function
 102              	PWM1_ReadCounter:
 103              	.LFB5:
 407:.\Generated_Source\PSoC5/PWM1.c ****     }
 408:.\Generated_Source\PSoC5/PWM1.c **** 
 409:.\Generated_Source\PSoC5/PWM1.c **** 
 410:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 10


 411:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadCounter
 412:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 413:.\Generated_Source\PSoC5/PWM1.c ****     *
 414:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 415:.\Generated_Source\PSoC5/PWM1.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:.\Generated_Source\PSoC5/PWM1.c ****     *  if the counter is enabled or running.
 417:.\Generated_Source\PSoC5/PWM1.c ****     *
 418:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 419:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 420:.\Generated_Source\PSoC5/PWM1.c ****     *
 421:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 422:.\Generated_Source\PSoC5/PWM1.c ****     *  The current value of the counter.
 423:.\Generated_Source\PSoC5/PWM1.c ****     *
 424:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 425:.\Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadCounter(void) 
 426:.\Generated_Source\PSoC5/PWM1.c ****     {
 104              		.loc 1 426 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 427:.\Generated_Source\PSoC5/PWM1.c ****         /* Force capture by reading Accumulator */
 428:.\Generated_Source\PSoC5/PWM1.c ****         /* Must first do a software capture to be able to read the counter */
 429:.\Generated_Source\PSoC5/PWM1.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:.\Generated_Source\PSoC5/PWM1.c ****           (void)CY_GET_REG8(PWM1_COUNTERCAP_LSB_PTR_8BIT);
 109              		.loc 1 430 0
 110 0000 024B     		ldr	r3, .L11
 111 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431:.\Generated_Source\PSoC5/PWM1.c **** 
 432:.\Generated_Source\PSoC5/PWM1.c ****         /* Read the data from the FIFO */
 433:.\Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_CAPTURE_LSB_PTR));
 112              		.loc 1 433 0
 113 0004 024B     		ldr	r3, .L11+4
 114 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 434:.\Generated_Source\PSoC5/PWM1.c ****     }
 115              		.loc 1 434 0
 116 0008 7047     		bx	lr
 117              	.L12:
 118 000a 00BF     		.align	2
 119              	.L11:
 120 000c 1B640040 		.word	1073767451
 121 0010 5B640040 		.word	1073767515
 122              		.cfi_endproc
 123              	.LFE5:
 124              		.size	PWM1_ReadCounter, .-PWM1_ReadCounter
 125              		.section	.text.PWM1_WritePeriod,"ax",%progbits
 126              		.align	2
 127              		.global	PWM1_WritePeriod
 128              		.thumb
 129              		.thumb_func
 130              		.type	PWM1_WritePeriod, %function
 131              	PWM1_WritePeriod:
 132              	.LFB7:
 435:.\Generated_Source\PSoC5/PWM1.c **** 
 436:.\Generated_Source\PSoC5/PWM1.c ****     #if (PWM1_UseStatus)
 437:.\Generated_Source\PSoC5/PWM1.c **** 
 438:.\Generated_Source\PSoC5/PWM1.c **** 
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 11


 439:.\Generated_Source\PSoC5/PWM1.c ****         /*******************************************************************************
 440:.\Generated_Source\PSoC5/PWM1.c ****         * Function Name: PWM1_ClearFIFO
 441:.\Generated_Source\PSoC5/PWM1.c ****         ********************************************************************************
 442:.\Generated_Source\PSoC5/PWM1.c ****         *
 443:.\Generated_Source\PSoC5/PWM1.c ****         * Summary:
 444:.\Generated_Source\PSoC5/PWM1.c ****         *  This function clears all capture data from the capture FIFO
 445:.\Generated_Source\PSoC5/PWM1.c ****         *
 446:.\Generated_Source\PSoC5/PWM1.c ****         * Parameters:
 447:.\Generated_Source\PSoC5/PWM1.c ****         *  None
 448:.\Generated_Source\PSoC5/PWM1.c ****         *
 449:.\Generated_Source\PSoC5/PWM1.c ****         * Return:
 450:.\Generated_Source\PSoC5/PWM1.c ****         *  None
 451:.\Generated_Source\PSoC5/PWM1.c ****         *
 452:.\Generated_Source\PSoC5/PWM1.c ****         *******************************************************************************/
 453:.\Generated_Source\PSoC5/PWM1.c ****         void PWM1_ClearFIFO(void) 
 454:.\Generated_Source\PSoC5/PWM1.c ****         {
 455:.\Generated_Source\PSoC5/PWM1.c ****             while(0u != (PWM1_ReadStatusRegister() & PWM1_STATUS_FIFONEMPTY))
 456:.\Generated_Source\PSoC5/PWM1.c ****             {
 457:.\Generated_Source\PSoC5/PWM1.c ****                 (void)PWM1_ReadCapture();
 458:.\Generated_Source\PSoC5/PWM1.c ****             }
 459:.\Generated_Source\PSoC5/PWM1.c ****         }
 460:.\Generated_Source\PSoC5/PWM1.c **** 
 461:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* PWM1_UseStatus */
 462:.\Generated_Source\PSoC5/PWM1.c **** 
 463:.\Generated_Source\PSoC5/PWM1.c **** #endif /* !PWM1_UsingFixedFunction */
 464:.\Generated_Source\PSoC5/PWM1.c **** 
 465:.\Generated_Source\PSoC5/PWM1.c **** 
 466:.\Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
 467:.\Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_WritePeriod
 468:.\Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
 469:.\Generated_Source\PSoC5/PWM1.c **** *
 470:.\Generated_Source\PSoC5/PWM1.c **** * Summary:
 471:.\Generated_Source\PSoC5/PWM1.c **** *  This function is used to change the period of the counter.  The new period
 472:.\Generated_Source\PSoC5/PWM1.c **** *  will be loaded the next time terminal count is detected.
 473:.\Generated_Source\PSoC5/PWM1.c **** *
 474:.\Generated_Source\PSoC5/PWM1.c **** * Parameters:
 475:.\Generated_Source\PSoC5/PWM1.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:.\Generated_Source\PSoC5/PWM1.c **** *           will result in the counter remaining at zero.
 477:.\Generated_Source\PSoC5/PWM1.c **** *
 478:.\Generated_Source\PSoC5/PWM1.c **** * Return:
 479:.\Generated_Source\PSoC5/PWM1.c **** *  None
 480:.\Generated_Source\PSoC5/PWM1.c **** *
 481:.\Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
 482:.\Generated_Source\PSoC5/PWM1.c **** void PWM1_WritePeriod(uint8 period) 
 483:.\Generated_Source\PSoC5/PWM1.c **** {
 133              		.loc 1 483 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138              	.LVL1:
 484:.\Generated_Source\PSoC5/PWM1.c ****     #if(PWM1_UsingFixedFunction)
 485:.\Generated_Source\PSoC5/PWM1.c ****         CY_SET_REG16(PWM1_PERIOD_LSB_PTR, (uint16)period);
 486:.\Generated_Source\PSoC5/PWM1.c ****     #else
 487:.\Generated_Source\PSoC5/PWM1.c ****         CY_SET_REG8(PWM1_PERIOD_LSB_PTR, period);
 139              		.loc 1 487 0
 140 0000 014B     		ldr	r3, .L14
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 12


 141 0002 1870     		strb	r0, [r3]
 142 0004 7047     		bx	lr
 143              	.L15:
 144 0006 00BF     		.align	2
 145              	.L14:
 146 0008 4B640040 		.word	1073767499
 147              		.cfi_endproc
 148              	.LFE7:
 149              		.size	PWM1_WritePeriod, .-PWM1_WritePeriod
 150              		.section	.text.PWM1_WriteCompare,"ax",%progbits
 151              		.align	2
 152              		.global	PWM1_WriteCompare
 153              		.thumb
 154              		.thumb_func
 155              		.type	PWM1_WriteCompare, %function
 156              	PWM1_WriteCompare:
 157              	.LFB8:
 488:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
 489:.\Generated_Source\PSoC5/PWM1.c **** }
 490:.\Generated_Source\PSoC5/PWM1.c **** 
 491:.\Generated_Source\PSoC5/PWM1.c **** #if (PWM1_UseOneCompareMode)
 492:.\Generated_Source\PSoC5/PWM1.c **** 
 493:.\Generated_Source\PSoC5/PWM1.c **** 
 494:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 495:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteCompare
 496:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 497:.\Generated_Source\PSoC5/PWM1.c ****     *
 498:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 499:.\Generated_Source\PSoC5/PWM1.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:.\Generated_Source\PSoC5/PWM1.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:.\Generated_Source\PSoC5/PWM1.c ****     *  The compare output will be driven high when the present counter value is
 502:.\Generated_Source\PSoC5/PWM1.c ****     *  compared to the compare value based on the compare mode defined in
 503:.\Generated_Source\PSoC5/PWM1.c ****     *  Dither Mode.
 504:.\Generated_Source\PSoC5/PWM1.c ****     *
 505:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 506:.\Generated_Source\PSoC5/PWM1.c ****     *  compare:  New compare value.
 507:.\Generated_Source\PSoC5/PWM1.c ****     *
 508:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 509:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 510:.\Generated_Source\PSoC5/PWM1.c ****     *
 511:.\Generated_Source\PSoC5/PWM1.c ****     * Side Effects:
 512:.\Generated_Source\PSoC5/PWM1.c ****     *  This function is only available if the PWM mode parameter is set to
 513:.\Generated_Source\PSoC5/PWM1.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:.\Generated_Source\PSoC5/PWM1.c ****     *
 515:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 516:.\Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteCompare(uint8 compare) \
 517:.\Generated_Source\PSoC5/PWM1.c ****                                        
 518:.\Generated_Source\PSoC5/PWM1.c ****     {
 158              		.loc 1 518 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163              	.LVL2:
 519:.\Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UsingFixedFunction)
 520:.\Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG16(PWM1_COMPARE1_LSB_PTR, (uint16)compare);
 521:.\Generated_Source\PSoC5/PWM1.c ****         #else
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 13


 522:.\Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG8(PWM1_COMPARE1_LSB_PTR, compare);
 164              		.loc 1 522 0
 165 0000 014B     		ldr	r3, .L17
 166 0002 1870     		strb	r0, [r3]
 167 0004 7047     		bx	lr
 168              	.L18:
 169 0006 00BF     		.align	2
 170              	.L17:
 171 0008 2B640040 		.word	1073767467
 172              		.cfi_endproc
 173              	.LFE8:
 174              		.size	PWM1_WriteCompare, .-PWM1_WriteCompare
 175              		.section	.text.PWM1_SetInterruptMode,"ax",%progbits
 176              		.align	2
 177              		.global	PWM1_SetInterruptMode
 178              		.thumb
 179              		.thumb_func
 180              		.type	PWM1_SetInterruptMode, %function
 181              	PWM1_SetInterruptMode:
 182              	.LFB9:
 523:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UsingFixedFunction) */
 524:.\Generated_Source\PSoC5/PWM1.c **** 
 525:.\Generated_Source\PSoC5/PWM1.c ****         #if (PWM1_PWMMode == PWM1__B_PWM__DITHER)
 526:.\Generated_Source\PSoC5/PWM1.c ****             #if(PWM1_UsingFixedFunction)
 527:.\Generated_Source\PSoC5/PWM1.c ****                 CY_SET_REG16(PWM1_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:.\Generated_Source\PSoC5/PWM1.c ****             #else
 529:.\Generated_Source\PSoC5/PWM1.c ****                 CY_SET_REG8(PWM1_COMPARE2_LSB_PTR, (compare + 1u));
 530:.\Generated_Source\PSoC5/PWM1.c ****             #endif /* (PWM1_UsingFixedFunction) */
 531:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_PWMMode == PWM1__B_PWM__DITHER) */
 532:.\Generated_Source\PSoC5/PWM1.c ****     }
 533:.\Generated_Source\PSoC5/PWM1.c **** 
 534:.\Generated_Source\PSoC5/PWM1.c **** 
 535:.\Generated_Source\PSoC5/PWM1.c **** #else
 536:.\Generated_Source\PSoC5/PWM1.c **** 
 537:.\Generated_Source\PSoC5/PWM1.c **** 
 538:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 539:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteCompare1
 540:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 541:.\Generated_Source\PSoC5/PWM1.c ****     *
 542:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 543:.\Generated_Source\PSoC5/PWM1.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:.\Generated_Source\PSoC5/PWM1.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:.\Generated_Source\PSoC5/PWM1.c ****     *  driven high when the present counter value is less than or less than or
 546:.\Generated_Source\PSoC5/PWM1.c ****     *  equal to the compare register, depending on the mode.
 547:.\Generated_Source\PSoC5/PWM1.c ****     *
 548:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 549:.\Generated_Source\PSoC5/PWM1.c ****     *  compare:  New compare value.
 550:.\Generated_Source\PSoC5/PWM1.c ****     *
 551:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 552:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 553:.\Generated_Source\PSoC5/PWM1.c ****     *
 554:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 555:.\Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteCompare1(uint8 compare) \
 556:.\Generated_Source\PSoC5/PWM1.c ****                                         
 557:.\Generated_Source\PSoC5/PWM1.c ****     {
 558:.\Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UsingFixedFunction)
 559:.\Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG16(PWM1_COMPARE1_LSB_PTR, (uint16)compare);
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 14


 560:.\Generated_Source\PSoC5/PWM1.c ****         #else
 561:.\Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG8(PWM1_COMPARE1_LSB_PTR, compare);
 562:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UsingFixedFunction) */
 563:.\Generated_Source\PSoC5/PWM1.c ****     }
 564:.\Generated_Source\PSoC5/PWM1.c **** 
 565:.\Generated_Source\PSoC5/PWM1.c **** 
 566:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 567:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteCompare2
 568:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 569:.\Generated_Source\PSoC5/PWM1.c ****     *
 570:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 571:.\Generated_Source\PSoC5/PWM1.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:.\Generated_Source\PSoC5/PWM1.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:.\Generated_Source\PSoC5/PWM1.c ****     *  The compare output will be driven high when the present counter value is
 574:.\Generated_Source\PSoC5/PWM1.c ****     *  less than or less than or equal to the compare register, depending on the
 575:.\Generated_Source\PSoC5/PWM1.c ****     *  mode.
 576:.\Generated_Source\PSoC5/PWM1.c ****     *
 577:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 578:.\Generated_Source\PSoC5/PWM1.c ****     *  compare:  New compare value.
 579:.\Generated_Source\PSoC5/PWM1.c ****     *
 580:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 581:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 582:.\Generated_Source\PSoC5/PWM1.c ****     *
 583:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 584:.\Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteCompare2(uint8 compare) \
 585:.\Generated_Source\PSoC5/PWM1.c ****                                         
 586:.\Generated_Source\PSoC5/PWM1.c ****     {
 587:.\Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UsingFixedFunction)
 588:.\Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG16(PWM1_COMPARE2_LSB_PTR, compare);
 589:.\Generated_Source\PSoC5/PWM1.c ****         #else
 590:.\Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG8(PWM1_COMPARE2_LSB_PTR, compare);
 591:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UsingFixedFunction) */
 592:.\Generated_Source\PSoC5/PWM1.c ****     }
 593:.\Generated_Source\PSoC5/PWM1.c **** #endif /* UseOneCompareMode */
 594:.\Generated_Source\PSoC5/PWM1.c **** 
 595:.\Generated_Source\PSoC5/PWM1.c **** #if (PWM1_DeadBandUsed)
 596:.\Generated_Source\PSoC5/PWM1.c **** 
 597:.\Generated_Source\PSoC5/PWM1.c **** 
 598:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 599:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteDeadTime
 600:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 601:.\Generated_Source\PSoC5/PWM1.c ****     *
 602:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 603:.\Generated_Source\PSoC5/PWM1.c ****     *  This function writes the dead-band counts to the corresponding register
 604:.\Generated_Source\PSoC5/PWM1.c ****     *
 605:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 606:.\Generated_Source\PSoC5/PWM1.c ****     *  deadtime:  Number of counts for dead time
 607:.\Generated_Source\PSoC5/PWM1.c ****     *
 608:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 609:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 610:.\Generated_Source\PSoC5/PWM1.c ****     *
 611:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 612:.\Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteDeadTime(uint8 deadtime) 
 613:.\Generated_Source\PSoC5/PWM1.c ****     {
 614:.\Generated_Source\PSoC5/PWM1.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:.\Generated_Source\PSoC5/PWM1.c ****         #if(!PWM1_DeadBand2_4)
 616:.\Generated_Source\PSoC5/PWM1.c ****             CY_SET_REG8(PWM1_DEADBAND_COUNT_PTR, deadtime);
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 15


 617:.\Generated_Source\PSoC5/PWM1.c ****         #else
 618:.\Generated_Source\PSoC5/PWM1.c ****             /* Otherwise the data has to be masked and offset */
 619:.\Generated_Source\PSoC5/PWM1.c ****             /* Clear existing data */
 620:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_DEADBAND_COUNT &= ((uint8)(~PWM1_DEADBAND_COUNT_MASK));
 621:.\Generated_Source\PSoC5/PWM1.c **** 
 622:.\Generated_Source\PSoC5/PWM1.c ****             /* Set new dead time */
 623:.\Generated_Source\PSoC5/PWM1.c ****             #if(PWM1_DEADBAND_COUNT_SHIFT)
 624:.\Generated_Source\PSoC5/PWM1.c ****                 PWM1_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM1_DEADBAND_COUNT_SHIFT)) &
 625:.\Generated_Source\PSoC5/PWM1.c ****                                                     PWM1_DEADBAND_COUNT_MASK;
 626:.\Generated_Source\PSoC5/PWM1.c ****             #else
 627:.\Generated_Source\PSoC5/PWM1.c ****                 PWM1_DEADBAND_COUNT |= deadtime & PWM1_DEADBAND_COUNT_MASK;
 628:.\Generated_Source\PSoC5/PWM1.c ****             #endif /* (PWM1_DEADBAND_COUNT_SHIFT) */
 629:.\Generated_Source\PSoC5/PWM1.c **** 
 630:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (!PWM1_DeadBand2_4) */
 631:.\Generated_Source\PSoC5/PWM1.c ****     }
 632:.\Generated_Source\PSoC5/PWM1.c **** 
 633:.\Generated_Source\PSoC5/PWM1.c **** 
 634:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 635:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadDeadTime
 636:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 637:.\Generated_Source\PSoC5/PWM1.c ****     *
 638:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 639:.\Generated_Source\PSoC5/PWM1.c ****     *  This function reads the dead-band counts from the corresponding register
 640:.\Generated_Source\PSoC5/PWM1.c ****     *
 641:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 642:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 643:.\Generated_Source\PSoC5/PWM1.c ****     *
 644:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 645:.\Generated_Source\PSoC5/PWM1.c ****     *  Dead Band Counts
 646:.\Generated_Source\PSoC5/PWM1.c ****     *
 647:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 648:.\Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadDeadTime(void) 
 649:.\Generated_Source\PSoC5/PWM1.c ****     {
 650:.\Generated_Source\PSoC5/PWM1.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:.\Generated_Source\PSoC5/PWM1.c ****         #if(!PWM1_DeadBand2_4)
 652:.\Generated_Source\PSoC5/PWM1.c ****             return (CY_GET_REG8(PWM1_DEADBAND_COUNT_PTR));
 653:.\Generated_Source\PSoC5/PWM1.c ****         #else
 654:.\Generated_Source\PSoC5/PWM1.c **** 
 655:.\Generated_Source\PSoC5/PWM1.c ****             /* Otherwise the data has to be masked and offset */
 656:.\Generated_Source\PSoC5/PWM1.c ****             #if(PWM1_DEADBAND_COUNT_SHIFT)
 657:.\Generated_Source\PSoC5/PWM1.c ****                 return ((uint8)(((uint8)(PWM1_DEADBAND_COUNT & PWM1_DEADBAND_COUNT_MASK)) >>
 658:.\Generated_Source\PSoC5/PWM1.c ****                                                                            PWM1_DEADBAND_COUNT_SHIF
 659:.\Generated_Source\PSoC5/PWM1.c ****             #else
 660:.\Generated_Source\PSoC5/PWM1.c ****                 return (PWM1_DEADBAND_COUNT & PWM1_DEADBAND_COUNT_MASK);
 661:.\Generated_Source\PSoC5/PWM1.c ****             #endif /* (PWM1_DEADBAND_COUNT_SHIFT) */
 662:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (!PWM1_DeadBand2_4) */
 663:.\Generated_Source\PSoC5/PWM1.c ****     }
 664:.\Generated_Source\PSoC5/PWM1.c **** #endif /* DeadBandUsed */
 665:.\Generated_Source\PSoC5/PWM1.c **** 
 666:.\Generated_Source\PSoC5/PWM1.c **** #if (PWM1_UseStatus || PWM1_UsingFixedFunction)
 667:.\Generated_Source\PSoC5/PWM1.c **** 
 668:.\Generated_Source\PSoC5/PWM1.c **** 
 669:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 670:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_SetInterruptMode
 671:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 672:.\Generated_Source\PSoC5/PWM1.c ****     *
 673:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 16


 674:.\Generated_Source\PSoC5/PWM1.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:.\Generated_Source\PSoC5/PWM1.c ****     *  source status register.
 676:.\Generated_Source\PSoC5/PWM1.c ****     *
 677:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 678:.\Generated_Source\PSoC5/PWM1.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:.\Generated_Source\PSoC5/PWM1.c ****     *
 680:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 681:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 682:.\Generated_Source\PSoC5/PWM1.c ****     *
 683:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 684:.\Generated_Source\PSoC5/PWM1.c ****     void PWM1_SetInterruptMode(uint8 interruptMode) 
 685:.\Generated_Source\PSoC5/PWM1.c ****     {
 183              		.loc 1 685 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              		@ link register save eliminated.
 188              	.LVL3:
 686:.\Generated_Source\PSoC5/PWM1.c ****         CY_SET_REG8(PWM1_STATUS_MASK_PTR, interruptMode);
 189              		.loc 1 686 0
 190 0000 014B     		ldr	r3, .L20
 191 0002 1870     		strb	r0, [r3]
 192 0004 7047     		bx	lr
 193              	.L21:
 194 0006 00BF     		.align	2
 195              	.L20:
 196 0008 8B640040 		.word	1073767563
 197              		.cfi_endproc
 198              	.LFE9:
 199              		.size	PWM1_SetInterruptMode, .-PWM1_SetInterruptMode
 200              		.section	.text.PWM1_ReadStatusRegister,"ax",%progbits
 201              		.align	2
 202              		.global	PWM1_ReadStatusRegister
 203              		.thumb
 204              		.thumb_func
 205              		.type	PWM1_ReadStatusRegister, %function
 206              	PWM1_ReadStatusRegister:
 207              	.LFB10:
 687:.\Generated_Source\PSoC5/PWM1.c ****     }
 688:.\Generated_Source\PSoC5/PWM1.c **** 
 689:.\Generated_Source\PSoC5/PWM1.c **** 
 690:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 691:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadStatusRegister
 692:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 693:.\Generated_Source\PSoC5/PWM1.c ****     *
 694:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 695:.\Generated_Source\PSoC5/PWM1.c ****     *  This function returns the current state of the status register.
 696:.\Generated_Source\PSoC5/PWM1.c ****     *
 697:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 698:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 699:.\Generated_Source\PSoC5/PWM1.c ****     *
 700:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 701:.\Generated_Source\PSoC5/PWM1.c ****     *  uint8 : Current status register value. The status register bits are:
 702:.\Generated_Source\PSoC5/PWM1.c ****     *  [7:6] : Unused(0)
 703:.\Generated_Source\PSoC5/PWM1.c ****     *  [5]   : Kill event output
 704:.\Generated_Source\PSoC5/PWM1.c ****     *  [4]   : FIFO not empty
 705:.\Generated_Source\PSoC5/PWM1.c ****     *  [3]   : FIFO full
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 17


 706:.\Generated_Source\PSoC5/PWM1.c ****     *  [2]   : Terminal count
 707:.\Generated_Source\PSoC5/PWM1.c ****     *  [1]   : Compare output 2
 708:.\Generated_Source\PSoC5/PWM1.c ****     *  [0]   : Compare output 1
 709:.\Generated_Source\PSoC5/PWM1.c ****     *
 710:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 711:.\Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadStatusRegister(void) 
 712:.\Generated_Source\PSoC5/PWM1.c ****     {
 208              		.loc 1 712 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 713:.\Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_STATUS_PTR));
 213              		.loc 1 713 0
 214 0000 014B     		ldr	r3, .L23
 215 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 714:.\Generated_Source\PSoC5/PWM1.c ****     }
 216              		.loc 1 714 0
 217 0004 7047     		bx	lr
 218              	.L24:
 219 0006 00BF     		.align	2
 220              	.L23:
 221 0008 6B640040 		.word	1073767531
 222              		.cfi_endproc
 223              	.LFE10:
 224              		.size	PWM1_ReadStatusRegister, .-PWM1_ReadStatusRegister
 225              		.section	.text.PWM1_ReadControlRegister,"ax",%progbits
 226              		.align	2
 227              		.global	PWM1_ReadControlRegister
 228              		.thumb
 229              		.thumb_func
 230              		.type	PWM1_ReadControlRegister, %function
 231              	PWM1_ReadControlRegister:
 232              	.LFB11:
 715:.\Generated_Source\PSoC5/PWM1.c **** 
 716:.\Generated_Source\PSoC5/PWM1.c **** #endif /* (PWM1_UseStatus || PWM1_UsingFixedFunction) */
 717:.\Generated_Source\PSoC5/PWM1.c **** 
 718:.\Generated_Source\PSoC5/PWM1.c **** 
 719:.\Generated_Source\PSoC5/PWM1.c **** #if (PWM1_UseControl)
 720:.\Generated_Source\PSoC5/PWM1.c **** 
 721:.\Generated_Source\PSoC5/PWM1.c **** 
 722:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 723:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadControlRegister
 724:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 725:.\Generated_Source\PSoC5/PWM1.c ****     *
 726:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 727:.\Generated_Source\PSoC5/PWM1.c ****     *  Returns the current state of the control register. This API is available
 728:.\Generated_Source\PSoC5/PWM1.c ****     *  only if the control register is not removed.
 729:.\Generated_Source\PSoC5/PWM1.c ****     *
 730:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 731:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 732:.\Generated_Source\PSoC5/PWM1.c ****     *
 733:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 734:.\Generated_Source\PSoC5/PWM1.c ****     *  uint8 : Current control register value
 735:.\Generated_Source\PSoC5/PWM1.c ****     *
 736:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 737:.\Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadControlRegister(void) 
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 18


 738:.\Generated_Source\PSoC5/PWM1.c ****     {
 233              		.loc 1 738 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 739:.\Generated_Source\PSoC5/PWM1.c ****         uint8 result;
 740:.\Generated_Source\PSoC5/PWM1.c **** 
 741:.\Generated_Source\PSoC5/PWM1.c ****         result = CY_GET_REG8(PWM1_CONTROL_PTR);
 238              		.loc 1 741 0
 239 0000 014B     		ldr	r3, .L26
 240 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 241              	.LVL4:
 742:.\Generated_Source\PSoC5/PWM1.c ****         return (result);
 743:.\Generated_Source\PSoC5/PWM1.c ****     }
 242              		.loc 1 743 0
 243 0004 7047     		bx	lr
 244              	.L27:
 245 0006 00BF     		.align	2
 246              	.L26:
 247 0008 7B640040 		.word	1073767547
 248              		.cfi_endproc
 249              	.LFE11:
 250              		.size	PWM1_ReadControlRegister, .-PWM1_ReadControlRegister
 251              		.section	.text.PWM1_WriteControlRegister,"ax",%progbits
 252              		.align	2
 253              		.global	PWM1_WriteControlRegister
 254              		.thumb
 255              		.thumb_func
 256              		.type	PWM1_WriteControlRegister, %function
 257              	PWM1_WriteControlRegister:
 258              	.LFB12:
 744:.\Generated_Source\PSoC5/PWM1.c **** 
 745:.\Generated_Source\PSoC5/PWM1.c **** 
 746:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 747:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_WriteControlRegister
 748:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 749:.\Generated_Source\PSoC5/PWM1.c ****     *
 750:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 751:.\Generated_Source\PSoC5/PWM1.c ****     *  Sets the bit field of the control register. This API is available only if
 752:.\Generated_Source\PSoC5/PWM1.c ****     *  the control register is not removed.
 753:.\Generated_Source\PSoC5/PWM1.c ****     *
 754:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 755:.\Generated_Source\PSoC5/PWM1.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:.\Generated_Source\PSoC5/PWM1.c ****     *  [7]   : PWM Enable
 757:.\Generated_Source\PSoC5/PWM1.c ****     *  [6]   : Reset
 758:.\Generated_Source\PSoC5/PWM1.c ****     *  [5:3] : Compare Mode2
 759:.\Generated_Source\PSoC5/PWM1.c ****     *  [2:0] : Compare Mode2
 760:.\Generated_Source\PSoC5/PWM1.c ****     *
 761:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 762:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 763:.\Generated_Source\PSoC5/PWM1.c ****     *
 764:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 765:.\Generated_Source\PSoC5/PWM1.c ****     void PWM1_WriteControlRegister(uint8 control) 
 766:.\Generated_Source\PSoC5/PWM1.c ****     {
 259              		.loc 1 766 0
 260              		.cfi_startproc
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 19


 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 264              	.LVL5:
 767:.\Generated_Source\PSoC5/PWM1.c ****         CY_SET_REG8(PWM1_CONTROL_PTR, control);
 265              		.loc 1 767 0
 266 0000 014B     		ldr	r3, .L29
 267 0002 1870     		strb	r0, [r3]
 268 0004 7047     		bx	lr
 269              	.L30:
 270 0006 00BF     		.align	2
 271              	.L29:
 272 0008 7B640040 		.word	1073767547
 273              		.cfi_endproc
 274              	.LFE12:
 275              		.size	PWM1_WriteControlRegister, .-PWM1_WriteControlRegister
 276              		.section	.text.PWM1_ReadCapture,"ax",%progbits
 277              		.align	2
 278              		.global	PWM1_ReadCapture
 279              		.thumb
 280              		.thumb_func
 281              		.type	PWM1_ReadCapture, %function
 282              	PWM1_ReadCapture:
 283              	.LFB13:
 768:.\Generated_Source\PSoC5/PWM1.c ****     }
 769:.\Generated_Source\PSoC5/PWM1.c **** 
 770:.\Generated_Source\PSoC5/PWM1.c **** #endif /* (PWM1_UseControl) */
 771:.\Generated_Source\PSoC5/PWM1.c **** 
 772:.\Generated_Source\PSoC5/PWM1.c **** 
 773:.\Generated_Source\PSoC5/PWM1.c **** #if (!PWM1_UsingFixedFunction)
 774:.\Generated_Source\PSoC5/PWM1.c **** 
 775:.\Generated_Source\PSoC5/PWM1.c **** 
 776:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 777:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadCapture
 778:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 779:.\Generated_Source\PSoC5/PWM1.c ****     *
 780:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 781:.\Generated_Source\PSoC5/PWM1.c ****     *  Reads the capture value from the capture FIFO.
 782:.\Generated_Source\PSoC5/PWM1.c ****     *
 783:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 784:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 785:.\Generated_Source\PSoC5/PWM1.c ****     *
 786:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 787:.\Generated_Source\PSoC5/PWM1.c ****     *  uint8/uint16: The current capture value
 788:.\Generated_Source\PSoC5/PWM1.c ****     *
 789:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadCapture(void) 
 791:.\Generated_Source\PSoC5/PWM1.c ****     {
 284              		.loc 1 791 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 792:.\Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_CAPTURE_LSB_PTR));
 289              		.loc 1 792 0
 290 0000 014B     		ldr	r3, .L32
 291 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 20


 793:.\Generated_Source\PSoC5/PWM1.c ****     }
 292              		.loc 1 793 0
 293 0004 7047     		bx	lr
 294              	.L33:
 295 0006 00BF     		.align	2
 296              	.L32:
 297 0008 5B640040 		.word	1073767515
 298              		.cfi_endproc
 299              	.LFE13:
 300              		.size	PWM1_ReadCapture, .-PWM1_ReadCapture
 301              		.section	.text.PWM1_ClearFIFO,"ax",%progbits
 302              		.align	2
 303              		.global	PWM1_ClearFIFO
 304              		.thumb
 305              		.thumb_func
 306              		.type	PWM1_ClearFIFO, %function
 307              	PWM1_ClearFIFO:
 308              	.LFB6:
 454:.\Generated_Source\PSoC5/PWM1.c ****         {
 309              		.loc 1 454 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313 0000 08B5     		push	{r3, lr}
 314              		.cfi_def_cfa_offset 8
 315              		.cfi_offset 3, -8
 316              		.cfi_offset 14, -4
 455:.\Generated_Source\PSoC5/PWM1.c ****             while(0u != (PWM1_ReadStatusRegister() & PWM1_STATUS_FIFONEMPTY))
 317              		.loc 1 455 0
 318 0002 01E0     		b	.L35
 319              	.L36:
 457:.\Generated_Source\PSoC5/PWM1.c ****                 (void)PWM1_ReadCapture();
 320              		.loc 1 457 0
 321 0004 FFF7FEFF 		bl	PWM1_ReadCapture
 322              	.LVL6:
 323              	.L35:
 455:.\Generated_Source\PSoC5/PWM1.c ****             while(0u != (PWM1_ReadStatusRegister() & PWM1_STATUS_FIFONEMPTY))
 324              		.loc 1 455 0 discriminator 1
 325 0008 FFF7FEFF 		bl	PWM1_ReadStatusRegister
 326              	.LVL7:
 327 000c 10F0100F 		tst	r0, #16
 328 0010 F8D1     		bne	.L36
 459:.\Generated_Source\PSoC5/PWM1.c ****         }
 329              		.loc 1 459 0
 330 0012 08BD     		pop	{r3, pc}
 331              		.cfi_endproc
 332              	.LFE6:
 333              		.size	PWM1_ClearFIFO, .-PWM1_ClearFIFO
 334              		.section	.text.PWM1_Init,"ax",%progbits
 335              		.align	2
 336              		.global	PWM1_Init
 337              		.thumb
 338              		.thumb_func
 339              		.type	PWM1_Init, %function
 340              	PWM1_Init:
 341              	.LFB1:
  85:.\Generated_Source\PSoC5/PWM1.c **** {
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 21


 342              		.loc 1 85 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346 0000 10B5     		push	{r4, lr}
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 4, -8
 349              		.cfi_offset 14, -4
 117:.\Generated_Source\PSoC5/PWM1.c ****         ctrl = PWM1_CONTROL & ((uint8)(~PWM1_CTRL_CMPMODE2_MASK)) &
 350              		.loc 1 117 0
 351 0002 114B     		ldr	r3, .L38
 352 0004 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 353 0006 02F0C002 		and	r2, r2, #192
 354              	.LVL8:
 119:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_CONTROL = ctrl | PWM1_DEFAULT_COMPARE2_MODE |
 355              		.loc 1 119 0
 356 000a 42F00902 		orr	r2, r2, #9
 357              	.LVL9:
 358 000e 1A70     		strb	r2, [r3]
 126:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_AUX_CONTROLDP0 |= (PWM1_AUX_CTRL_FIFO0_CLR);
 359              		.loc 1 126 0
 360 0010 0E4C     		ldr	r4, .L38+4
 361 0012 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 362 0014 43F00103 		orr	r3, r3, #1
 363 0018 2370     		strb	r3, [r4]
 133:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_WriteCounter(PWM1_INIT_PERIOD_VALUE);
 364              		.loc 1 133 0
 365 001a 0920     		movs	r0, #9
 366 001c FFF7FEFF 		bl	PWM1_WriteCounter
 367              	.LVL10:
 136:.\Generated_Source\PSoC5/PWM1.c ****     PWM1_WritePeriod(PWM1_INIT_PERIOD_VALUE);
 368              		.loc 1 136 0
 369 0020 0920     		movs	r0, #9
 370 0022 FFF7FEFF 		bl	PWM1_WritePeriod
 371              	.LVL11:
 139:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_WriteCompare(PWM1_INIT_COMPARE_VALUE1);
 372              		.loc 1 139 0
 373 0026 0420     		movs	r0, #4
 374 0028 FFF7FEFF 		bl	PWM1_WriteCompare
 375              	.LVL12:
 154:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_SetInterruptMode(PWM1_INIT_INTERRUPTS_MODE);
 376              		.loc 1 154 0
 377 002c 0020     		movs	r0, #0
 378 002e FFF7FEFF 		bl	PWM1_SetInterruptMode
 379              	.LVL13:
 167:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_interruptState = CyEnterCriticalSection();
 380              		.loc 1 167 0
 381 0032 FFF7FEFF 		bl	CyEnterCriticalSection
 382              	.LVL14:
 169:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_STATUS_AUX_CTRL |= PWM1_STATUS_ACTL_INT_EN_MASK;
 383              		.loc 1 169 0
 384 0036 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 385 0038 43F01003 		orr	r3, r3, #16
 386 003c 2370     		strb	r3, [r4]
 172:.\Generated_Source\PSoC5/PWM1.c ****             CyExitCriticalSection(PWM1_interruptState);
 387              		.loc 1 172 0
 388 003e FFF7FEFF 		bl	CyExitCriticalSection
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 22


 389              	.LVL15:
 176:.\Generated_Source\PSoC5/PWM1.c ****             PWM1_ClearFIFO();
 390              		.loc 1 176 0
 391 0042 FFF7FEFF 		bl	PWM1_ClearFIFO
 392              	.LVL16:
 393 0046 10BD     		pop	{r4, pc}
 394              	.L39:
 395              		.align	2
 396              	.L38:
 397 0048 7B640040 		.word	1073767547
 398 004c 9B640040 		.word	1073767579
 399              		.cfi_endproc
 400              	.LFE1:
 401              		.size	PWM1_Init, .-PWM1_Init
 402              		.section	.text.PWM1_Start,"ax",%progbits
 403              		.align	2
 404              		.global	PWM1_Start
 405              		.thumb
 406              		.thumb_func
 407              		.type	PWM1_Start, %function
 408              	PWM1_Start:
 409              	.LFB0:
  56:.\Generated_Source\PSoC5/PWM1.c **** {
 410              		.loc 1 56 0
 411              		.cfi_startproc
 412              		@ args = 0, pretend = 0, frame = 0
 413              		@ frame_needed = 0, uses_anonymous_args = 0
 414 0000 08B5     		push	{r3, lr}
 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 3, -8
 417              		.cfi_offset 14, -4
  58:.\Generated_Source\PSoC5/PWM1.c ****     if(PWM1_initVar == 0u)
 418              		.loc 1 58 0
 419 0002 054B     		ldr	r3, .L42
 420 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 421 0006 23B9     		cbnz	r3, .L41
  60:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_Init();
 422              		.loc 1 60 0
 423 0008 FFF7FEFF 		bl	PWM1_Init
 424              	.LVL17:
  61:.\Generated_Source\PSoC5/PWM1.c ****         PWM1_initVar = 1u;
 425              		.loc 1 61 0
 426 000c 0122     		movs	r2, #1
 427 000e 024B     		ldr	r3, .L42
 428 0010 1A70     		strb	r2, [r3]
 429              	.L41:
  63:.\Generated_Source\PSoC5/PWM1.c ****     PWM1_Enable();
 430              		.loc 1 63 0
 431 0012 FFF7FEFF 		bl	PWM1_Enable
 432              	.LVL18:
 433 0016 08BD     		pop	{r3, pc}
 434              	.L43:
 435              		.align	2
 436              	.L42:
 437 0018 00000000 		.word	.LANCHOR0
 438              		.cfi_endproc
 439              	.LFE0:
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 23


 440              		.size	PWM1_Start, .-PWM1_Start
 441              		.section	.text.PWM1_ReadCompare,"ax",%progbits
 442              		.align	2
 443              		.global	PWM1_ReadCompare
 444              		.thumb
 445              		.thumb_func
 446              		.type	PWM1_ReadCompare, %function
 447              	PWM1_ReadCompare:
 448              	.LFB14:
 794:.\Generated_Source\PSoC5/PWM1.c **** 
 795:.\Generated_Source\PSoC5/PWM1.c **** #endif /* (!PWM1_UsingFixedFunction) */
 796:.\Generated_Source\PSoC5/PWM1.c **** 
 797:.\Generated_Source\PSoC5/PWM1.c **** 
 798:.\Generated_Source\PSoC5/PWM1.c **** #if (PWM1_UseOneCompareMode)
 799:.\Generated_Source\PSoC5/PWM1.c **** 
 800:.\Generated_Source\PSoC5/PWM1.c **** 
 801:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 802:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadCompare
 803:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 804:.\Generated_Source\PSoC5/PWM1.c ****     *
 805:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 806:.\Generated_Source\PSoC5/PWM1.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:.\Generated_Source\PSoC5/PWM1.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:.\Generated_Source\PSoC5/PWM1.c ****     *
 809:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 810:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 811:.\Generated_Source\PSoC5/PWM1.c ****     *
 812:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 813:.\Generated_Source\PSoC5/PWM1.c ****     *  uint8/uint16: Current compare value
 814:.\Generated_Source\PSoC5/PWM1.c ****     *
 815:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 816:.\Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadCompare(void) 
 817:.\Generated_Source\PSoC5/PWM1.c ****     {
 449              		.loc 1 817 0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 0
 452              		@ frame_needed = 0, uses_anonymous_args = 0
 453              		@ link register save eliminated.
 818:.\Generated_Source\PSoC5/PWM1.c ****         #if(PWM1_UsingFixedFunction)
 819:.\Generated_Source\PSoC5/PWM1.c ****             return ((uint8)CY_GET_REG16(PWM1_COMPARE1_LSB_PTR));
 820:.\Generated_Source\PSoC5/PWM1.c ****         #else
 821:.\Generated_Source\PSoC5/PWM1.c ****             return (CY_GET_REG8(PWM1_COMPARE1_LSB_PTR));
 454              		.loc 1 821 0
 455 0000 014B     		ldr	r3, .L45
 456 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 822:.\Generated_Source\PSoC5/PWM1.c ****         #endif /* (PWM1_UsingFixedFunction) */
 823:.\Generated_Source\PSoC5/PWM1.c ****     }
 457              		.loc 1 823 0
 458 0004 7047     		bx	lr
 459              	.L46:
 460 0006 00BF     		.align	2
 461              	.L45:
 462 0008 2B640040 		.word	1073767467
 463              		.cfi_endproc
 464              	.LFE14:
 465              		.size	PWM1_ReadCompare, .-PWM1_ReadCompare
 466              		.section	.text.PWM1_ReadPeriod,"ax",%progbits
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 24


 467              		.align	2
 468              		.global	PWM1_ReadPeriod
 469              		.thumb
 470              		.thumb_func
 471              		.type	PWM1_ReadPeriod, %function
 472              	PWM1_ReadPeriod:
 473              	.LFB15:
 824:.\Generated_Source\PSoC5/PWM1.c **** 
 825:.\Generated_Source\PSoC5/PWM1.c **** #else
 826:.\Generated_Source\PSoC5/PWM1.c **** 
 827:.\Generated_Source\PSoC5/PWM1.c **** 
 828:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 829:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadCompare1
 830:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 831:.\Generated_Source\PSoC5/PWM1.c ****     *
 832:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 833:.\Generated_Source\PSoC5/PWM1.c ****     *  Reads the compare value for the compare1 output.
 834:.\Generated_Source\PSoC5/PWM1.c ****     *
 835:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 836:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 837:.\Generated_Source\PSoC5/PWM1.c ****     *
 838:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 839:.\Generated_Source\PSoC5/PWM1.c ****     *  uint8/uint16: Current compare value.
 840:.\Generated_Source\PSoC5/PWM1.c ****     *
 841:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 842:.\Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadCompare1(void) 
 843:.\Generated_Source\PSoC5/PWM1.c ****     {
 844:.\Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_COMPARE1_LSB_PTR));
 845:.\Generated_Source\PSoC5/PWM1.c ****     }
 846:.\Generated_Source\PSoC5/PWM1.c **** 
 847:.\Generated_Source\PSoC5/PWM1.c **** 
 848:.\Generated_Source\PSoC5/PWM1.c ****     /*******************************************************************************
 849:.\Generated_Source\PSoC5/PWM1.c ****     * Function Name: PWM1_ReadCompare2
 850:.\Generated_Source\PSoC5/PWM1.c ****     ********************************************************************************
 851:.\Generated_Source\PSoC5/PWM1.c ****     *
 852:.\Generated_Source\PSoC5/PWM1.c ****     * Summary:
 853:.\Generated_Source\PSoC5/PWM1.c ****     *  Reads the compare value for the compare2 output.
 854:.\Generated_Source\PSoC5/PWM1.c ****     *
 855:.\Generated_Source\PSoC5/PWM1.c ****     * Parameters:
 856:.\Generated_Source\PSoC5/PWM1.c ****     *  None
 857:.\Generated_Source\PSoC5/PWM1.c ****     *
 858:.\Generated_Source\PSoC5/PWM1.c ****     * Return:
 859:.\Generated_Source\PSoC5/PWM1.c ****     *  uint8/uint16: Current compare value.
 860:.\Generated_Source\PSoC5/PWM1.c ****     *
 861:.\Generated_Source\PSoC5/PWM1.c ****     *******************************************************************************/
 862:.\Generated_Source\PSoC5/PWM1.c ****     uint8 PWM1_ReadCompare2(void) 
 863:.\Generated_Source\PSoC5/PWM1.c ****     {
 864:.\Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_COMPARE2_LSB_PTR));
 865:.\Generated_Source\PSoC5/PWM1.c ****     }
 866:.\Generated_Source\PSoC5/PWM1.c **** 
 867:.\Generated_Source\PSoC5/PWM1.c **** #endif /* (PWM1_UseOneCompareMode) */
 868:.\Generated_Source\PSoC5/PWM1.c **** 
 869:.\Generated_Source\PSoC5/PWM1.c **** 
 870:.\Generated_Source\PSoC5/PWM1.c **** /*******************************************************************************
 871:.\Generated_Source\PSoC5/PWM1.c **** * Function Name: PWM1_ReadPeriod
 872:.\Generated_Source\PSoC5/PWM1.c **** ********************************************************************************
 873:.\Generated_Source\PSoC5/PWM1.c **** *
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 25


 874:.\Generated_Source\PSoC5/PWM1.c **** * Summary:
 875:.\Generated_Source\PSoC5/PWM1.c **** *  Reads the period value used by the PWM hardware.
 876:.\Generated_Source\PSoC5/PWM1.c **** *
 877:.\Generated_Source\PSoC5/PWM1.c **** * Parameters:
 878:.\Generated_Source\PSoC5/PWM1.c **** *  None
 879:.\Generated_Source\PSoC5/PWM1.c **** *
 880:.\Generated_Source\PSoC5/PWM1.c **** * Return:
 881:.\Generated_Source\PSoC5/PWM1.c **** *  uint8/16: Period value
 882:.\Generated_Source\PSoC5/PWM1.c **** *
 883:.\Generated_Source\PSoC5/PWM1.c **** *******************************************************************************/
 884:.\Generated_Source\PSoC5/PWM1.c **** uint8 PWM1_ReadPeriod(void) 
 885:.\Generated_Source\PSoC5/PWM1.c **** {
 474              		.loc 1 885 0
 475              		.cfi_startproc
 476              		@ args = 0, pretend = 0, frame = 0
 477              		@ frame_needed = 0, uses_anonymous_args = 0
 478              		@ link register save eliminated.
 886:.\Generated_Source\PSoC5/PWM1.c ****     #if(PWM1_UsingFixedFunction)
 887:.\Generated_Source\PSoC5/PWM1.c ****         return ((uint8)CY_GET_REG16(PWM1_PERIOD_LSB_PTR));
 888:.\Generated_Source\PSoC5/PWM1.c ****     #else
 889:.\Generated_Source\PSoC5/PWM1.c ****         return (CY_GET_REG8(PWM1_PERIOD_LSB_PTR));
 479              		.loc 1 889 0
 480 0000 014B     		ldr	r3, .L48
 481 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 890:.\Generated_Source\PSoC5/PWM1.c ****     #endif /* (PWM1_UsingFixedFunction) */
 891:.\Generated_Source\PSoC5/PWM1.c **** }
 482              		.loc 1 891 0
 483 0004 7047     		bx	lr
 484              	.L49:
 485 0006 00BF     		.align	2
 486              	.L48:
 487 0008 4B640040 		.word	1073767499
 488              		.cfi_endproc
 489              	.LFE15:
 490              		.size	PWM1_ReadPeriod, .-PWM1_ReadPeriod
 491              		.global	PWM1_initVar
 492              		.bss
 493              		.set	.LANCHOR0,. + 0
 494              		.type	PWM1_initVar, %object
 495              		.size	PWM1_initVar, 1
 496              	PWM1_initVar:
 497 0000 00       		.space	1
 498              		.text
 499              	.Letext0:
 500              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 501              		.file 3 ".\\Generated_Source\\PSoC5\\CyLib.h"
 502              		.section	.debug_info,"",%progbits
 503              	.Ldebug_info0:
 504 0000 27030000 		.4byte	0x327
 505 0004 0400     		.2byte	0x4
 506 0006 00000000 		.4byte	.Ldebug_abbrev0
 507 000a 04       		.byte	0x4
 508 000b 01       		.uleb128 0x1
 509 000c 91010000 		.4byte	.LASF38
 510 0010 01       		.byte	0x1
 511 0011 AC020000 		.4byte	.LASF39
 512 0015 E0020000 		.4byte	.LASF40
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 26


 513 0019 00000000 		.4byte	.Ldebug_ranges0+0
 514 001d 00000000 		.4byte	0
 515 0021 00000000 		.4byte	.Ldebug_line0
 516 0025 02       		.uleb128 0x2
 517 0026 01       		.byte	0x1
 518 0027 06       		.byte	0x6
 519 0028 CC020000 		.4byte	.LASF0
 520 002c 02       		.uleb128 0x2
 521 002d 01       		.byte	0x1
 522 002e 08       		.byte	0x8
 523 002f BD000000 		.4byte	.LASF1
 524 0033 02       		.uleb128 0x2
 525 0034 02       		.byte	0x2
 526 0035 05       		.byte	0x5
 527 0036 6F020000 		.4byte	.LASF2
 528 003a 02       		.uleb128 0x2
 529 003b 02       		.byte	0x2
 530 003c 07       		.byte	0x7
 531 003d 39000000 		.4byte	.LASF3
 532 0041 02       		.uleb128 0x2
 533 0042 04       		.byte	0x4
 534 0043 05       		.byte	0x5
 535 0044 9E020000 		.4byte	.LASF4
 536 0048 02       		.uleb128 0x2
 537 0049 04       		.byte	0x4
 538 004a 07       		.byte	0x7
 539 004b D8000000 		.4byte	.LASF5
 540 004f 02       		.uleb128 0x2
 541 0050 08       		.byte	0x8
 542 0051 05       		.byte	0x5
 543 0052 2E020000 		.4byte	.LASF6
 544 0056 02       		.uleb128 0x2
 545 0057 08       		.byte	0x8
 546 0058 07       		.byte	0x7
 547 0059 A6000000 		.4byte	.LASF7
 548 005d 03       		.uleb128 0x3
 549 005e 04       		.byte	0x4
 550 005f 05       		.byte	0x5
 551 0060 696E7400 		.ascii	"int\000"
 552 0064 02       		.uleb128 0x2
 553 0065 04       		.byte	0x4
 554 0066 07       		.byte	0x7
 555 0067 4C000000 		.4byte	.LASF8
 556 006b 04       		.uleb128 0x4
 557 006c EA000000 		.4byte	.LASF12
 558 0070 02       		.byte	0x2
 559 0071 B4       		.byte	0xb4
 560 0072 2C000000 		.4byte	0x2c
 561 0076 02       		.uleb128 0x2
 562 0077 04       		.byte	0x4
 563 0078 04       		.byte	0x4
 564 0079 22000000 		.4byte	.LASF9
 565 007d 02       		.uleb128 0x2
 566 007e 08       		.byte	0x8
 567 007f 04       		.byte	0x4
 568 0080 F8000000 		.4byte	.LASF10
 569 0084 02       		.uleb128 0x2
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 27


 570 0085 01       		.byte	0x1
 571 0086 08       		.byte	0x8
 572 0087 A7020000 		.4byte	.LASF11
 573 008b 05       		.uleb128 0x5
 574 008c 8C010000 		.4byte	.LASF13
 575 0090 02       		.byte	0x2
 576 0091 5E01     		.2byte	0x15e
 577 0093 97000000 		.4byte	0x97
 578 0097 06       		.uleb128 0x6
 579 0098 6B000000 		.4byte	0x6b
 580 009c 02       		.uleb128 0x2
 581 009d 04       		.byte	0x4
 582 009e 07       		.byte	0x7
 583 009f 25020000 		.4byte	.LASF14
 584 00a3 07       		.uleb128 0x7
 585 00a4 FF000000 		.4byte	.LASF15
 586 00a8 01       		.byte	0x1
 587 00a9 C7       		.byte	0xc7
 588 00aa 00000000 		.4byte	.LFB2
 589 00ae 10000000 		.4byte	.LFE2-.LFB2
 590 00b2 01       		.uleb128 0x1
 591 00b3 9C       		.byte	0x9c
 592 00b4 07       		.uleb128 0x7
 593 00b5 28000000 		.4byte	.LASF16
 594 00b9 01       		.byte	0x1
 595 00ba E9       		.byte	0xe9
 596 00bb 00000000 		.4byte	.LFB3
 597 00bf 10000000 		.4byte	.LFE3-.LFB3
 598 00c3 01       		.uleb128 0x1
 599 00c4 9C       		.byte	0x9c
 600 00c5 08       		.uleb128 0x8
 601 00c6 33010000 		.4byte	.LASF17
 602 00ca 01       		.byte	0x1
 603 00cb 9301     		.2byte	0x193
 604 00cd 00000000 		.4byte	.LFB4
 605 00d1 0C000000 		.4byte	.LFE4-.LFB4
 606 00d5 01       		.uleb128 0x1
 607 00d6 9C       		.byte	0x9c
 608 00d7 EA000000 		.4byte	0xea
 609 00db 09       		.uleb128 0x9
 610 00dc 9E000000 		.4byte	.LASF19
 611 00e0 01       		.byte	0x1
 612 00e1 9301     		.2byte	0x193
 613 00e3 6B000000 		.4byte	0x6b
 614 00e7 01       		.uleb128 0x1
 615 00e8 50       		.byte	0x50
 616 00e9 00       		.byte	0
 617 00ea 0A       		.uleb128 0xa
 618 00eb 7B010000 		.4byte	.LASF25
 619 00ef 01       		.byte	0x1
 620 00f0 A901     		.2byte	0x1a9
 621 00f2 6B000000 		.4byte	0x6b
 622 00f6 00000000 		.4byte	.LFB5
 623 00fa 14000000 		.4byte	.LFE5-.LFB5
 624 00fe 01       		.uleb128 0x1
 625 00ff 9C       		.byte	0x9c
 626 0100 08       		.uleb128 0x8
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 28


 627 0101 22010000 		.4byte	.LASF18
 628 0105 01       		.byte	0x1
 629 0106 E201     		.2byte	0x1e2
 630 0108 00000000 		.4byte	.LFB7
 631 010c 0C000000 		.4byte	.LFE7-.LFB7
 632 0110 01       		.uleb128 0x1
 633 0111 9C       		.byte	0x9c
 634 0112 25010000 		.4byte	0x125
 635 0116 09       		.uleb128 0x9
 636 0117 32000000 		.4byte	.LASF20
 637 011b 01       		.byte	0x1
 638 011c E201     		.2byte	0x1e2
 639 011e 6B000000 		.4byte	0x6b
 640 0122 01       		.uleb128 0x1
 641 0123 50       		.byte	0x50
 642 0124 00       		.byte	0
 643 0125 08       		.uleb128 0x8
 644 0126 68000000 		.4byte	.LASF21
 645 012a 01       		.byte	0x1
 646 012b 0402     		.2byte	0x204
 647 012d 00000000 		.4byte	.LFB8
 648 0131 0C000000 		.4byte	.LFE8-.LFB8
 649 0135 01       		.uleb128 0x1
 650 0136 9C       		.byte	0x9c
 651 0137 4A010000 		.4byte	0x14a
 652 013b 09       		.uleb128 0x9
 653 013c D8020000 		.4byte	.LASF22
 654 0140 01       		.byte	0x1
 655 0141 0402     		.2byte	0x204
 656 0143 6B000000 		.4byte	0x6b
 657 0147 01       		.uleb128 0x1
 658 0148 50       		.byte	0x50
 659 0149 00       		.byte	0
 660 014a 08       		.uleb128 0x8
 661 014b 88020000 		.4byte	.LASF23
 662 014f 01       		.byte	0x1
 663 0150 AC02     		.2byte	0x2ac
 664 0152 00000000 		.4byte	.LFB9
 665 0156 0C000000 		.4byte	.LFE9-.LFB9
 666 015a 01       		.uleb128 0x1
 667 015b 9C       		.byte	0x9c
 668 015c 6F010000 		.4byte	0x16f
 669 0160 09       		.uleb128 0x9
 670 0161 3C020000 		.4byte	.LASF24
 671 0165 01       		.byte	0x1
 672 0166 AC02     		.2byte	0x2ac
 673 0168 6B000000 		.4byte	0x6b
 674 016c 01       		.uleb128 0x1
 675 016d 50       		.byte	0x50
 676 016e 00       		.byte	0
 677 016f 0A       		.uleb128 0xa
 678 0170 0D020000 		.4byte	.LASF26
 679 0174 01       		.byte	0x1
 680 0175 C702     		.2byte	0x2c7
 681 0177 6B000000 		.4byte	0x6b
 682 017b 00000000 		.4byte	.LFB10
 683 017f 0C000000 		.4byte	.LFE10-.LFB10
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 29


 684 0183 01       		.uleb128 0x1
 685 0184 9C       		.byte	0x9c
 686 0185 0B       		.uleb128 0xb
 687 0186 62010000 		.4byte	.LASF41
 688 018a 01       		.byte	0x1
 689 018b E102     		.2byte	0x2e1
 690 018d 6B000000 		.4byte	0x6b
 691 0191 00000000 		.4byte	.LFB11
 692 0195 0C000000 		.4byte	.LFE11-.LFB11
 693 0199 01       		.uleb128 0x1
 694 019a 9C       		.byte	0x9c
 695 019b AE010000 		.4byte	0x1ae
 696 019f 0C       		.uleb128 0xc
 697 01a0 5B010000 		.4byte	.LASF32
 698 01a4 01       		.byte	0x1
 699 01a5 E302     		.2byte	0x2e3
 700 01a7 6B000000 		.4byte	0x6b
 701 01ab 01       		.uleb128 0x1
 702 01ac 50       		.byte	0x50
 703 01ad 00       		.byte	0
 704 01ae 08       		.uleb128 0x8
 705 01af 55020000 		.4byte	.LASF27
 706 01b3 01       		.byte	0x1
 707 01b4 FD02     		.2byte	0x2fd
 708 01b6 00000000 		.4byte	.LFB12
 709 01ba 0C000000 		.4byte	.LFE12-.LFB12
 710 01be 01       		.uleb128 0x1
 711 01bf 9C       		.byte	0x9c
 712 01c0 D3010000 		.4byte	0x1d3
 713 01c4 09       		.uleb128 0x9
 714 01c5 F0000000 		.4byte	.LASF28
 715 01c9 01       		.byte	0x1
 716 01ca FD02     		.2byte	0x2fd
 717 01cc 6B000000 		.4byte	0x6b
 718 01d0 01       		.uleb128 0x1
 719 01d1 50       		.byte	0x50
 720 01d2 00       		.byte	0
 721 01d3 0A       		.uleb128 0xa
 722 01d4 11000000 		.4byte	.LASF29
 723 01d8 01       		.byte	0x1
 724 01d9 1603     		.2byte	0x316
 725 01db 6B000000 		.4byte	0x6b
 726 01df 00000000 		.4byte	.LFB13
 727 01e3 0C000000 		.4byte	.LFE13-.LFB13
 728 01e7 01       		.uleb128 0x1
 729 01e8 9C       		.byte	0x9c
 730 01e9 08       		.uleb128 0x8
 731 01ea 59000000 		.4byte	.LASF30
 732 01ee 01       		.byte	0x1
 733 01ef C501     		.2byte	0x1c5
 734 01f1 00000000 		.4byte	.LFB6
 735 01f5 14000000 		.4byte	.LFE6-.LFB6
 736 01f9 01       		.uleb128 0x1
 737 01fa 9C       		.byte	0x9c
 738 01fb 12020000 		.4byte	0x212
 739 01ff 0D       		.uleb128 0xd
 740 0200 08000000 		.4byte	.LVL6
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 30


 741 0204 D3010000 		.4byte	0x1d3
 742 0208 0D       		.uleb128 0xd
 743 0209 0C000000 		.4byte	.LVL7
 744 020d 6F010000 		.4byte	0x16f
 745 0211 00       		.byte	0
 746 0212 0E       		.uleb128 0xe
 747 0213 7E020000 		.4byte	.LASF31
 748 0217 01       		.byte	0x1
 749 0218 54       		.byte	0x54
 750 0219 00000000 		.4byte	.LFB1
 751 021d 50000000 		.4byte	.LFE1-.LFB1
 752 0221 01       		.uleb128 0x1
 753 0222 9C       		.byte	0x9c
 754 0223 AD020000 		.4byte	0x2ad
 755 0227 0F       		.uleb128 0xf
 756 0228 79020000 		.4byte	.LASF33
 757 022c 01       		.byte	0x1
 758 022d 57       		.byte	0x57
 759 022e 6B000000 		.4byte	0x6b
 760 0232 00000000 		.4byte	.LLST0
 761 0236 0F       		.uleb128 0xf
 762 0237 7A000000 		.4byte	.LASF34
 763 023b 01       		.byte	0x1
 764 023c 5D       		.byte	0x5d
 765 023d 6B000000 		.4byte	0x6b
 766 0241 13000000 		.4byte	.LLST1
 767 0245 10       		.uleb128 0x10
 768 0246 20000000 		.4byte	.LVL10
 769 024a C5000000 		.4byte	0xc5
 770 024e 58020000 		.4byte	0x258
 771 0252 11       		.uleb128 0x11
 772 0253 01       		.uleb128 0x1
 773 0254 50       		.byte	0x50
 774 0255 01       		.uleb128 0x1
 775 0256 39       		.byte	0x39
 776 0257 00       		.byte	0
 777 0258 10       		.uleb128 0x10
 778 0259 26000000 		.4byte	.LVL11
 779 025d 00010000 		.4byte	0x100
 780 0261 6B020000 		.4byte	0x26b
 781 0265 11       		.uleb128 0x11
 782 0266 01       		.uleb128 0x1
 783 0267 50       		.byte	0x50
 784 0268 01       		.uleb128 0x1
 785 0269 39       		.byte	0x39
 786 026a 00       		.byte	0
 787 026b 10       		.uleb128 0x10
 788 026c 2C000000 		.4byte	.LVL12
 789 0270 25010000 		.4byte	0x125
 790 0274 7E020000 		.4byte	0x27e
 791 0278 11       		.uleb128 0x11
 792 0279 01       		.uleb128 0x1
 793 027a 50       		.byte	0x50
 794 027b 01       		.uleb128 0x1
 795 027c 34       		.byte	0x34
 796 027d 00       		.byte	0
 797 027e 10       		.uleb128 0x10
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 31


 798 027f 32000000 		.4byte	.LVL13
 799 0283 4A010000 		.4byte	0x14a
 800 0287 91020000 		.4byte	0x291
 801 028b 11       		.uleb128 0x11
 802 028c 01       		.uleb128 0x1
 803 028d 50       		.byte	0x50
 804 028e 01       		.uleb128 0x1
 805 028f 30       		.byte	0x30
 806 0290 00       		.byte	0
 807 0291 0D       		.uleb128 0xd
 808 0292 36000000 		.4byte	.LVL14
 809 0296 12030000 		.4byte	0x312
 810 029a 0D       		.uleb128 0xd
 811 029b 42000000 		.4byte	.LVL15
 812 029f 1D030000 		.4byte	0x31d
 813 02a3 0D       		.uleb128 0xd
 814 02a4 46000000 		.4byte	.LVL16
 815 02a8 E9010000 		.4byte	0x1e9
 816 02ac 00       		.byte	0
 817 02ad 0E       		.uleb128 0xe
 818 02ae 4A020000 		.4byte	.LASF35
 819 02b2 01       		.byte	0x1
 820 02b3 37       		.byte	0x37
 821 02b4 00000000 		.4byte	.LFB0
 822 02b8 1C000000 		.4byte	.LFE0-.LFB0
 823 02bc 01       		.uleb128 0x1
 824 02bd 9C       		.byte	0x9c
 825 02be D5020000 		.4byte	0x2d5
 826 02c2 0D       		.uleb128 0xd
 827 02c3 0C000000 		.4byte	.LVL17
 828 02c7 12020000 		.4byte	0x212
 829 02cb 0D       		.uleb128 0xd
 830 02cc 16000000 		.4byte	.LVL18
 831 02d0 A3000000 		.4byte	0xa3
 832 02d4 00       		.byte	0
 833 02d5 0A       		.uleb128 0xa
 834 02d6 00000000 		.4byte	.LASF36
 835 02da 01       		.byte	0x1
 836 02db 3003     		.2byte	0x330
 837 02dd 6B000000 		.4byte	0x6b
 838 02e1 00000000 		.4byte	.LFB14
 839 02e5 0C000000 		.4byte	.LFE14-.LFB14
 840 02e9 01       		.uleb128 0x1
 841 02ea 9C       		.byte	0x9c
 842 02eb 0A       		.uleb128 0xa
 843 02ec 8E000000 		.4byte	.LASF37
 844 02f0 01       		.byte	0x1
 845 02f1 7403     		.2byte	0x374
 846 02f3 6B000000 		.4byte	0x6b
 847 02f7 00000000 		.4byte	.LFB15
 848 02fb 0C000000 		.4byte	.LFE15-.LFB15
 849 02ff 01       		.uleb128 0x1
 850 0300 9C       		.byte	0x9c
 851 0301 12       		.uleb128 0x12
 852 0302 CB000000 		.4byte	.LASF42
 853 0306 01       		.byte	0x1
 854 0307 20       		.byte	0x20
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 32


 855 0308 6B000000 		.4byte	0x6b
 856 030c 05       		.uleb128 0x5
 857 030d 03       		.byte	0x3
 858 030e 00000000 		.4byte	PWM1_initVar
 859 0312 13       		.uleb128 0x13
 860 0313 0B010000 		.4byte	.LASF43
 861 0317 03       		.byte	0x3
 862 0318 7E       		.byte	0x7e
 863 0319 6B000000 		.4byte	0x6b
 864 031d 14       		.uleb128 0x14
 865 031e 45010000 		.4byte	.LASF44
 866 0322 03       		.byte	0x3
 867 0323 7F       		.byte	0x7f
 868 0324 15       		.uleb128 0x15
 869 0325 6B000000 		.4byte	0x6b
 870 0329 00       		.byte	0
 871 032a 00       		.byte	0
 872              		.section	.debug_abbrev,"",%progbits
 873              	.Ldebug_abbrev0:
 874 0000 01       		.uleb128 0x1
 875 0001 11       		.uleb128 0x11
 876 0002 01       		.byte	0x1
 877 0003 25       		.uleb128 0x25
 878 0004 0E       		.uleb128 0xe
 879 0005 13       		.uleb128 0x13
 880 0006 0B       		.uleb128 0xb
 881 0007 03       		.uleb128 0x3
 882 0008 0E       		.uleb128 0xe
 883 0009 1B       		.uleb128 0x1b
 884 000a 0E       		.uleb128 0xe
 885 000b 55       		.uleb128 0x55
 886 000c 17       		.uleb128 0x17
 887 000d 11       		.uleb128 0x11
 888 000e 01       		.uleb128 0x1
 889 000f 10       		.uleb128 0x10
 890 0010 17       		.uleb128 0x17
 891 0011 00       		.byte	0
 892 0012 00       		.byte	0
 893 0013 02       		.uleb128 0x2
 894 0014 24       		.uleb128 0x24
 895 0015 00       		.byte	0
 896 0016 0B       		.uleb128 0xb
 897 0017 0B       		.uleb128 0xb
 898 0018 3E       		.uleb128 0x3e
 899 0019 0B       		.uleb128 0xb
 900 001a 03       		.uleb128 0x3
 901 001b 0E       		.uleb128 0xe
 902 001c 00       		.byte	0
 903 001d 00       		.byte	0
 904 001e 03       		.uleb128 0x3
 905 001f 24       		.uleb128 0x24
 906 0020 00       		.byte	0
 907 0021 0B       		.uleb128 0xb
 908 0022 0B       		.uleb128 0xb
 909 0023 3E       		.uleb128 0x3e
 910 0024 0B       		.uleb128 0xb
 911 0025 03       		.uleb128 0x3
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 33


 912 0026 08       		.uleb128 0x8
 913 0027 00       		.byte	0
 914 0028 00       		.byte	0
 915 0029 04       		.uleb128 0x4
 916 002a 16       		.uleb128 0x16
 917 002b 00       		.byte	0
 918 002c 03       		.uleb128 0x3
 919 002d 0E       		.uleb128 0xe
 920 002e 3A       		.uleb128 0x3a
 921 002f 0B       		.uleb128 0xb
 922 0030 3B       		.uleb128 0x3b
 923 0031 0B       		.uleb128 0xb
 924 0032 49       		.uleb128 0x49
 925 0033 13       		.uleb128 0x13
 926 0034 00       		.byte	0
 927 0035 00       		.byte	0
 928 0036 05       		.uleb128 0x5
 929 0037 16       		.uleb128 0x16
 930 0038 00       		.byte	0
 931 0039 03       		.uleb128 0x3
 932 003a 0E       		.uleb128 0xe
 933 003b 3A       		.uleb128 0x3a
 934 003c 0B       		.uleb128 0xb
 935 003d 3B       		.uleb128 0x3b
 936 003e 05       		.uleb128 0x5
 937 003f 49       		.uleb128 0x49
 938 0040 13       		.uleb128 0x13
 939 0041 00       		.byte	0
 940 0042 00       		.byte	0
 941 0043 06       		.uleb128 0x6
 942 0044 35       		.uleb128 0x35
 943 0045 00       		.byte	0
 944 0046 49       		.uleb128 0x49
 945 0047 13       		.uleb128 0x13
 946 0048 00       		.byte	0
 947 0049 00       		.byte	0
 948 004a 07       		.uleb128 0x7
 949 004b 2E       		.uleb128 0x2e
 950 004c 00       		.byte	0
 951 004d 3F       		.uleb128 0x3f
 952 004e 19       		.uleb128 0x19
 953 004f 03       		.uleb128 0x3
 954 0050 0E       		.uleb128 0xe
 955 0051 3A       		.uleb128 0x3a
 956 0052 0B       		.uleb128 0xb
 957 0053 3B       		.uleb128 0x3b
 958 0054 0B       		.uleb128 0xb
 959 0055 27       		.uleb128 0x27
 960 0056 19       		.uleb128 0x19
 961 0057 11       		.uleb128 0x11
 962 0058 01       		.uleb128 0x1
 963 0059 12       		.uleb128 0x12
 964 005a 06       		.uleb128 0x6
 965 005b 40       		.uleb128 0x40
 966 005c 18       		.uleb128 0x18
 967 005d 9742     		.uleb128 0x2117
 968 005f 19       		.uleb128 0x19
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 34


 969 0060 00       		.byte	0
 970 0061 00       		.byte	0
 971 0062 08       		.uleb128 0x8
 972 0063 2E       		.uleb128 0x2e
 973 0064 01       		.byte	0x1
 974 0065 3F       		.uleb128 0x3f
 975 0066 19       		.uleb128 0x19
 976 0067 03       		.uleb128 0x3
 977 0068 0E       		.uleb128 0xe
 978 0069 3A       		.uleb128 0x3a
 979 006a 0B       		.uleb128 0xb
 980 006b 3B       		.uleb128 0x3b
 981 006c 05       		.uleb128 0x5
 982 006d 27       		.uleb128 0x27
 983 006e 19       		.uleb128 0x19
 984 006f 11       		.uleb128 0x11
 985 0070 01       		.uleb128 0x1
 986 0071 12       		.uleb128 0x12
 987 0072 06       		.uleb128 0x6
 988 0073 40       		.uleb128 0x40
 989 0074 18       		.uleb128 0x18
 990 0075 9742     		.uleb128 0x2117
 991 0077 19       		.uleb128 0x19
 992 0078 01       		.uleb128 0x1
 993 0079 13       		.uleb128 0x13
 994 007a 00       		.byte	0
 995 007b 00       		.byte	0
 996 007c 09       		.uleb128 0x9
 997 007d 05       		.uleb128 0x5
 998 007e 00       		.byte	0
 999 007f 03       		.uleb128 0x3
 1000 0080 0E       		.uleb128 0xe
 1001 0081 3A       		.uleb128 0x3a
 1002 0082 0B       		.uleb128 0xb
 1003 0083 3B       		.uleb128 0x3b
 1004 0084 05       		.uleb128 0x5
 1005 0085 49       		.uleb128 0x49
 1006 0086 13       		.uleb128 0x13
 1007 0087 02       		.uleb128 0x2
 1008 0088 18       		.uleb128 0x18
 1009 0089 00       		.byte	0
 1010 008a 00       		.byte	0
 1011 008b 0A       		.uleb128 0xa
 1012 008c 2E       		.uleb128 0x2e
 1013 008d 00       		.byte	0
 1014 008e 3F       		.uleb128 0x3f
 1015 008f 19       		.uleb128 0x19
 1016 0090 03       		.uleb128 0x3
 1017 0091 0E       		.uleb128 0xe
 1018 0092 3A       		.uleb128 0x3a
 1019 0093 0B       		.uleb128 0xb
 1020 0094 3B       		.uleb128 0x3b
 1021 0095 05       		.uleb128 0x5
 1022 0096 27       		.uleb128 0x27
 1023 0097 19       		.uleb128 0x19
 1024 0098 49       		.uleb128 0x49
 1025 0099 13       		.uleb128 0x13
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 35


 1026 009a 11       		.uleb128 0x11
 1027 009b 01       		.uleb128 0x1
 1028 009c 12       		.uleb128 0x12
 1029 009d 06       		.uleb128 0x6
 1030 009e 40       		.uleb128 0x40
 1031 009f 18       		.uleb128 0x18
 1032 00a0 9742     		.uleb128 0x2117
 1033 00a2 19       		.uleb128 0x19
 1034 00a3 00       		.byte	0
 1035 00a4 00       		.byte	0
 1036 00a5 0B       		.uleb128 0xb
 1037 00a6 2E       		.uleb128 0x2e
 1038 00a7 01       		.byte	0x1
 1039 00a8 3F       		.uleb128 0x3f
 1040 00a9 19       		.uleb128 0x19
 1041 00aa 03       		.uleb128 0x3
 1042 00ab 0E       		.uleb128 0xe
 1043 00ac 3A       		.uleb128 0x3a
 1044 00ad 0B       		.uleb128 0xb
 1045 00ae 3B       		.uleb128 0x3b
 1046 00af 05       		.uleb128 0x5
 1047 00b0 27       		.uleb128 0x27
 1048 00b1 19       		.uleb128 0x19
 1049 00b2 49       		.uleb128 0x49
 1050 00b3 13       		.uleb128 0x13
 1051 00b4 11       		.uleb128 0x11
 1052 00b5 01       		.uleb128 0x1
 1053 00b6 12       		.uleb128 0x12
 1054 00b7 06       		.uleb128 0x6
 1055 00b8 40       		.uleb128 0x40
 1056 00b9 18       		.uleb128 0x18
 1057 00ba 9742     		.uleb128 0x2117
 1058 00bc 19       		.uleb128 0x19
 1059 00bd 01       		.uleb128 0x1
 1060 00be 13       		.uleb128 0x13
 1061 00bf 00       		.byte	0
 1062 00c0 00       		.byte	0
 1063 00c1 0C       		.uleb128 0xc
 1064 00c2 34       		.uleb128 0x34
 1065 00c3 00       		.byte	0
 1066 00c4 03       		.uleb128 0x3
 1067 00c5 0E       		.uleb128 0xe
 1068 00c6 3A       		.uleb128 0x3a
 1069 00c7 0B       		.uleb128 0xb
 1070 00c8 3B       		.uleb128 0x3b
 1071 00c9 05       		.uleb128 0x5
 1072 00ca 49       		.uleb128 0x49
 1073 00cb 13       		.uleb128 0x13
 1074 00cc 02       		.uleb128 0x2
 1075 00cd 18       		.uleb128 0x18
 1076 00ce 00       		.byte	0
 1077 00cf 00       		.byte	0
 1078 00d0 0D       		.uleb128 0xd
 1079 00d1 898201   		.uleb128 0x4109
 1080 00d4 00       		.byte	0
 1081 00d5 11       		.uleb128 0x11
 1082 00d6 01       		.uleb128 0x1
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 36


 1083 00d7 31       		.uleb128 0x31
 1084 00d8 13       		.uleb128 0x13
 1085 00d9 00       		.byte	0
 1086 00da 00       		.byte	0
 1087 00db 0E       		.uleb128 0xe
 1088 00dc 2E       		.uleb128 0x2e
 1089 00dd 01       		.byte	0x1
 1090 00de 3F       		.uleb128 0x3f
 1091 00df 19       		.uleb128 0x19
 1092 00e0 03       		.uleb128 0x3
 1093 00e1 0E       		.uleb128 0xe
 1094 00e2 3A       		.uleb128 0x3a
 1095 00e3 0B       		.uleb128 0xb
 1096 00e4 3B       		.uleb128 0x3b
 1097 00e5 0B       		.uleb128 0xb
 1098 00e6 27       		.uleb128 0x27
 1099 00e7 19       		.uleb128 0x19
 1100 00e8 11       		.uleb128 0x11
 1101 00e9 01       		.uleb128 0x1
 1102 00ea 12       		.uleb128 0x12
 1103 00eb 06       		.uleb128 0x6
 1104 00ec 40       		.uleb128 0x40
 1105 00ed 18       		.uleb128 0x18
 1106 00ee 9742     		.uleb128 0x2117
 1107 00f0 19       		.uleb128 0x19
 1108 00f1 01       		.uleb128 0x1
 1109 00f2 13       		.uleb128 0x13
 1110 00f3 00       		.byte	0
 1111 00f4 00       		.byte	0
 1112 00f5 0F       		.uleb128 0xf
 1113 00f6 34       		.uleb128 0x34
 1114 00f7 00       		.byte	0
 1115 00f8 03       		.uleb128 0x3
 1116 00f9 0E       		.uleb128 0xe
 1117 00fa 3A       		.uleb128 0x3a
 1118 00fb 0B       		.uleb128 0xb
 1119 00fc 3B       		.uleb128 0x3b
 1120 00fd 0B       		.uleb128 0xb
 1121 00fe 49       		.uleb128 0x49
 1122 00ff 13       		.uleb128 0x13
 1123 0100 02       		.uleb128 0x2
 1124 0101 17       		.uleb128 0x17
 1125 0102 00       		.byte	0
 1126 0103 00       		.byte	0
 1127 0104 10       		.uleb128 0x10
 1128 0105 898201   		.uleb128 0x4109
 1129 0108 01       		.byte	0x1
 1130 0109 11       		.uleb128 0x11
 1131 010a 01       		.uleb128 0x1
 1132 010b 31       		.uleb128 0x31
 1133 010c 13       		.uleb128 0x13
 1134 010d 01       		.uleb128 0x1
 1135 010e 13       		.uleb128 0x13
 1136 010f 00       		.byte	0
 1137 0110 00       		.byte	0
 1138 0111 11       		.uleb128 0x11
 1139 0112 8A8201   		.uleb128 0x410a
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 37


 1140 0115 00       		.byte	0
 1141 0116 02       		.uleb128 0x2
 1142 0117 18       		.uleb128 0x18
 1143 0118 9142     		.uleb128 0x2111
 1144 011a 18       		.uleb128 0x18
 1145 011b 00       		.byte	0
 1146 011c 00       		.byte	0
 1147 011d 12       		.uleb128 0x12
 1148 011e 34       		.uleb128 0x34
 1149 011f 00       		.byte	0
 1150 0120 03       		.uleb128 0x3
 1151 0121 0E       		.uleb128 0xe
 1152 0122 3A       		.uleb128 0x3a
 1153 0123 0B       		.uleb128 0xb
 1154 0124 3B       		.uleb128 0x3b
 1155 0125 0B       		.uleb128 0xb
 1156 0126 49       		.uleb128 0x49
 1157 0127 13       		.uleb128 0x13
 1158 0128 3F       		.uleb128 0x3f
 1159 0129 19       		.uleb128 0x19
 1160 012a 02       		.uleb128 0x2
 1161 012b 18       		.uleb128 0x18
 1162 012c 00       		.byte	0
 1163 012d 00       		.byte	0
 1164 012e 13       		.uleb128 0x13
 1165 012f 2E       		.uleb128 0x2e
 1166 0130 00       		.byte	0
 1167 0131 3F       		.uleb128 0x3f
 1168 0132 19       		.uleb128 0x19
 1169 0133 03       		.uleb128 0x3
 1170 0134 0E       		.uleb128 0xe
 1171 0135 3A       		.uleb128 0x3a
 1172 0136 0B       		.uleb128 0xb
 1173 0137 3B       		.uleb128 0x3b
 1174 0138 0B       		.uleb128 0xb
 1175 0139 27       		.uleb128 0x27
 1176 013a 19       		.uleb128 0x19
 1177 013b 49       		.uleb128 0x49
 1178 013c 13       		.uleb128 0x13
 1179 013d 3C       		.uleb128 0x3c
 1180 013e 19       		.uleb128 0x19
 1181 013f 00       		.byte	0
 1182 0140 00       		.byte	0
 1183 0141 14       		.uleb128 0x14
 1184 0142 2E       		.uleb128 0x2e
 1185 0143 01       		.byte	0x1
 1186 0144 3F       		.uleb128 0x3f
 1187 0145 19       		.uleb128 0x19
 1188 0146 03       		.uleb128 0x3
 1189 0147 0E       		.uleb128 0xe
 1190 0148 3A       		.uleb128 0x3a
 1191 0149 0B       		.uleb128 0xb
 1192 014a 3B       		.uleb128 0x3b
 1193 014b 0B       		.uleb128 0xb
 1194 014c 27       		.uleb128 0x27
 1195 014d 19       		.uleb128 0x19
 1196 014e 3C       		.uleb128 0x3c
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 38


 1197 014f 19       		.uleb128 0x19
 1198 0150 00       		.byte	0
 1199 0151 00       		.byte	0
 1200 0152 15       		.uleb128 0x15
 1201 0153 05       		.uleb128 0x5
 1202 0154 00       		.byte	0
 1203 0155 49       		.uleb128 0x49
 1204 0156 13       		.uleb128 0x13
 1205 0157 00       		.byte	0
 1206 0158 00       		.byte	0
 1207 0159 00       		.byte	0
 1208              		.section	.debug_loc,"",%progbits
 1209              	.Ldebug_loc0:
 1210              	.LLST0:
 1211 0000 0A000000 		.4byte	.LVL8
 1212 0004 0E000000 		.4byte	.LVL9
 1213 0008 0100     		.2byte	0x1
 1214 000a 52       		.byte	0x52
 1215 000b 00000000 		.4byte	0
 1216 000f 00000000 		.4byte	0
 1217              	.LLST1:
 1218 0013 36000000 		.4byte	.LVL14
 1219 0017 41000000 		.4byte	.LVL15-1
 1220 001b 0100     		.2byte	0x1
 1221 001d 50       		.byte	0x50
 1222 001e 00000000 		.4byte	0
 1223 0022 00000000 		.4byte	0
 1224              		.section	.debug_aranges,"",%progbits
 1225 0000 94000000 		.4byte	0x94
 1226 0004 0200     		.2byte	0x2
 1227 0006 00000000 		.4byte	.Ldebug_info0
 1228 000a 04       		.byte	0x4
 1229 000b 00       		.byte	0
 1230 000c 0000     		.2byte	0
 1231 000e 0000     		.2byte	0
 1232 0010 00000000 		.4byte	.LFB2
 1233 0014 10000000 		.4byte	.LFE2-.LFB2
 1234 0018 00000000 		.4byte	.LFB3
 1235 001c 10000000 		.4byte	.LFE3-.LFB3
 1236 0020 00000000 		.4byte	.LFB4
 1237 0024 0C000000 		.4byte	.LFE4-.LFB4
 1238 0028 00000000 		.4byte	.LFB5
 1239 002c 14000000 		.4byte	.LFE5-.LFB5
 1240 0030 00000000 		.4byte	.LFB7
 1241 0034 0C000000 		.4byte	.LFE7-.LFB7
 1242 0038 00000000 		.4byte	.LFB8
 1243 003c 0C000000 		.4byte	.LFE8-.LFB8
 1244 0040 00000000 		.4byte	.LFB9
 1245 0044 0C000000 		.4byte	.LFE9-.LFB9
 1246 0048 00000000 		.4byte	.LFB10
 1247 004c 0C000000 		.4byte	.LFE10-.LFB10
 1248 0050 00000000 		.4byte	.LFB11
 1249 0054 0C000000 		.4byte	.LFE11-.LFB11
 1250 0058 00000000 		.4byte	.LFB12
 1251 005c 0C000000 		.4byte	.LFE12-.LFB12
 1252 0060 00000000 		.4byte	.LFB13
 1253 0064 0C000000 		.4byte	.LFE13-.LFB13
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 39


 1254 0068 00000000 		.4byte	.LFB6
 1255 006c 14000000 		.4byte	.LFE6-.LFB6
 1256 0070 00000000 		.4byte	.LFB1
 1257 0074 50000000 		.4byte	.LFE1-.LFB1
 1258 0078 00000000 		.4byte	.LFB0
 1259 007c 1C000000 		.4byte	.LFE0-.LFB0
 1260 0080 00000000 		.4byte	.LFB14
 1261 0084 0C000000 		.4byte	.LFE14-.LFB14
 1262 0088 00000000 		.4byte	.LFB15
 1263 008c 0C000000 		.4byte	.LFE15-.LFB15
 1264 0090 00000000 		.4byte	0
 1265 0094 00000000 		.4byte	0
 1266              		.section	.debug_ranges,"",%progbits
 1267              	.Ldebug_ranges0:
 1268 0000 00000000 		.4byte	.LFB2
 1269 0004 10000000 		.4byte	.LFE2
 1270 0008 00000000 		.4byte	.LFB3
 1271 000c 10000000 		.4byte	.LFE3
 1272 0010 00000000 		.4byte	.LFB4
 1273 0014 0C000000 		.4byte	.LFE4
 1274 0018 00000000 		.4byte	.LFB5
 1275 001c 14000000 		.4byte	.LFE5
 1276 0020 00000000 		.4byte	.LFB7
 1277 0024 0C000000 		.4byte	.LFE7
 1278 0028 00000000 		.4byte	.LFB8
 1279 002c 0C000000 		.4byte	.LFE8
 1280 0030 00000000 		.4byte	.LFB9
 1281 0034 0C000000 		.4byte	.LFE9
 1282 0038 00000000 		.4byte	.LFB10
 1283 003c 0C000000 		.4byte	.LFE10
 1284 0040 00000000 		.4byte	.LFB11
 1285 0044 0C000000 		.4byte	.LFE11
 1286 0048 00000000 		.4byte	.LFB12
 1287 004c 0C000000 		.4byte	.LFE12
 1288 0050 00000000 		.4byte	.LFB13
 1289 0054 0C000000 		.4byte	.LFE13
 1290 0058 00000000 		.4byte	.LFB6
 1291 005c 14000000 		.4byte	.LFE6
 1292 0060 00000000 		.4byte	.LFB1
 1293 0064 50000000 		.4byte	.LFE1
 1294 0068 00000000 		.4byte	.LFB0
 1295 006c 1C000000 		.4byte	.LFE0
 1296 0070 00000000 		.4byte	.LFB14
 1297 0074 0C000000 		.4byte	.LFE14
 1298 0078 00000000 		.4byte	.LFB15
 1299 007c 0C000000 		.4byte	.LFE15
 1300 0080 00000000 		.4byte	0
 1301 0084 00000000 		.4byte	0
 1302              		.section	.debug_line,"",%progbits
 1303              	.Ldebug_line0:
 1304 0000 86010000 		.section	.debug_str,"MS",%progbits,1
 1304      02004E00 
 1304      00000201 
 1304      FB0E0D00 
 1304      01010101 
 1305              	.LASF36:
 1306 0000 50574D31 		.ascii	"PWM1_ReadCompare\000"
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 40


 1306      5F526561 
 1306      64436F6D 
 1306      70617265 
 1306      00
 1307              	.LASF29:
 1308 0011 50574D31 		.ascii	"PWM1_ReadCapture\000"
 1308      5F526561 
 1308      64436170 
 1308      74757265 
 1308      00
 1309              	.LASF9:
 1310 0022 666C6F61 		.ascii	"float\000"
 1310      7400
 1311              	.LASF16:
 1312 0028 50574D31 		.ascii	"PWM1_Stop\000"
 1312      5F53746F 
 1312      7000
 1313              	.LASF20:
 1314 0032 70657269 		.ascii	"period\000"
 1314      6F6400
 1315              	.LASF3:
 1316 0039 73686F72 		.ascii	"short unsigned int\000"
 1316      7420756E 
 1316      7369676E 
 1316      65642069 
 1316      6E7400
 1317              	.LASF8:
 1318 004c 756E7369 		.ascii	"unsigned int\000"
 1318      676E6564 
 1318      20696E74 
 1318      00
 1319              	.LASF30:
 1320 0059 50574D31 		.ascii	"PWM1_ClearFIFO\000"
 1320      5F436C65 
 1320      61724649 
 1320      464F00
 1321              	.LASF21:
 1322 0068 50574D31 		.ascii	"PWM1_WriteCompare\000"
 1322      5F577269 
 1322      7465436F 
 1322      6D706172 
 1322      6500
 1323              	.LASF34:
 1324 007a 50574D31 		.ascii	"PWM1_interruptState\000"
 1324      5F696E74 
 1324      65727275 
 1324      70745374 
 1324      61746500 
 1325              	.LASF37:
 1326 008e 50574D31 		.ascii	"PWM1_ReadPeriod\000"
 1326      5F526561 
 1326      64506572 
 1326      696F6400 
 1327              	.LASF19:
 1328 009e 636F756E 		.ascii	"counter\000"
 1328      74657200 
 1329              	.LASF7:
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 41


 1330 00a6 6C6F6E67 		.ascii	"long long unsigned int\000"
 1330      206C6F6E 
 1330      6720756E 
 1330      7369676E 
 1330      65642069 
 1331              	.LASF1:
 1332 00bd 756E7369 		.ascii	"unsigned char\000"
 1332      676E6564 
 1332      20636861 
 1332      7200
 1333              	.LASF42:
 1334 00cb 50574D31 		.ascii	"PWM1_initVar\000"
 1334      5F696E69 
 1334      74566172 
 1334      00
 1335              	.LASF5:
 1336 00d8 6C6F6E67 		.ascii	"long unsigned int\000"
 1336      20756E73 
 1336      69676E65 
 1336      6420696E 
 1336      7400
 1337              	.LASF12:
 1338 00ea 75696E74 		.ascii	"uint8\000"
 1338      3800
 1339              	.LASF28:
 1340 00f0 636F6E74 		.ascii	"control\000"
 1340      726F6C00 
 1341              	.LASF10:
 1342 00f8 646F7562 		.ascii	"double\000"
 1342      6C6500
 1343              	.LASF15:
 1344 00ff 50574D31 		.ascii	"PWM1_Enable\000"
 1344      5F456E61 
 1344      626C6500 
 1345              	.LASF43:
 1346 010b 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1346      74657243 
 1346      72697469 
 1346      63616C53 
 1346      65637469 
 1347              	.LASF18:
 1348 0122 50574D31 		.ascii	"PWM1_WritePeriod\000"
 1348      5F577269 
 1348      74655065 
 1348      72696F64 
 1348      00
 1349              	.LASF17:
 1350 0133 50574D31 		.ascii	"PWM1_WriteCounter\000"
 1350      5F577269 
 1350      7465436F 
 1350      756E7465 
 1350      7200
 1351              	.LASF44:
 1352 0145 43794578 		.ascii	"CyExitCriticalSection\000"
 1352      69744372 
 1352      69746963 
 1352      616C5365 
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 42


 1352      6374696F 
 1353              	.LASF32:
 1354 015b 72657375 		.ascii	"result\000"
 1354      6C7400
 1355              	.LASF41:
 1356 0162 50574D31 		.ascii	"PWM1_ReadControlRegister\000"
 1356      5F526561 
 1356      64436F6E 
 1356      74726F6C 
 1356      52656769 
 1357              	.LASF25:
 1358 017b 50574D31 		.ascii	"PWM1_ReadCounter\000"
 1358      5F526561 
 1358      64436F75 
 1358      6E746572 
 1358      00
 1359              	.LASF13:
 1360 018c 72656738 		.ascii	"reg8\000"
 1360      00
 1361              	.LASF38:
 1362 0191 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 1362      4320342E 
 1362      382E3420 
 1362      32303134 
 1362      30353236 
 1363 01c4 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m3 -mthumb -g -O"
 1363      20726576 
 1363      6973696F 
 1363      6E203231 
 1363      31333538 
 1364 01f7 67202D66 		.ascii	"g -ffunction-sections\000"
 1364      66756E63 
 1364      74696F6E 
 1364      2D736563 
 1364      74696F6E 
 1365              	.LASF26:
 1366 020d 50574D31 		.ascii	"PWM1_ReadStatusRegister\000"
 1366      5F526561 
 1366      64537461 
 1366      74757352 
 1366      65676973 
 1367              	.LASF14:
 1368 0225 73697A65 		.ascii	"sizetype\000"
 1368      74797065 
 1368      00
 1369              	.LASF6:
 1370 022e 6C6F6E67 		.ascii	"long long int\000"
 1370      206C6F6E 
 1370      6720696E 
 1370      7400
 1371              	.LASF24:
 1372 023c 696E7465 		.ascii	"interruptMode\000"
 1372      72727570 
 1372      744D6F64 
 1372      6500
 1373              	.LASF35:
 1374 024a 50574D31 		.ascii	"PWM1_Start\000"
ARM GAS  C:\Users\Dana\AppData\Local\Temp\ccKvN07L.s 			page 43


 1374      5F537461 
 1374      727400
 1375              	.LASF27:
 1376 0255 50574D31 		.ascii	"PWM1_WriteControlRegister\000"
 1376      5F577269 
 1376      7465436F 
 1376      6E74726F 
 1376      6C526567 
 1377              	.LASF2:
 1378 026f 73686F72 		.ascii	"short int\000"
 1378      7420696E 
 1378      7400
 1379              	.LASF33:
 1380 0279 6374726C 		.ascii	"ctrl\000"
 1380      00
 1381              	.LASF31:
 1382 027e 50574D31 		.ascii	"PWM1_Init\000"
 1382      5F496E69 
 1382      7400
 1383              	.LASF23:
 1384 0288 50574D31 		.ascii	"PWM1_SetInterruptMode\000"
 1384      5F536574 
 1384      496E7465 
 1384      72727570 
 1384      744D6F64 
 1385              	.LASF4:
 1386 029e 6C6F6E67 		.ascii	"long int\000"
 1386      20696E74 
 1386      00
 1387              	.LASF11:
 1388 02a7 63686172 		.ascii	"char\000"
 1388      00
 1389              	.LASF39:
 1390 02ac 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\PWM1.c\000"
 1390      6E657261 
 1390      7465645F 
 1390      536F7572 
 1390      63655C50 
 1391              	.LASF0:
 1392 02cc 7369676E 		.ascii	"signed char\000"
 1392      65642063 
 1392      68617200 
 1393              	.LASF22:
 1394 02d8 636F6D70 		.ascii	"compare\000"
 1394      61726500 
 1395              	.LASF40:
 1396 02e0 433A5C55 		.ascii	"C:\\Users\\Dana\\Documents\\PSoC Creator\\Design93\\"
 1396      73657273 
 1396      5C44616E 
 1396      615C446F 
 1396      63756D65 
 1397 030e 44657369 		.ascii	"Design93.cydsn\000"
 1397      676E3933 
 1397      2E637964 
 1397      736E00
 1398              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
